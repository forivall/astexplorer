webpackJsonp([20],{"./node_modules/raw-loader/index.js!./node_modules/uglify-js/lib/utils.js":function(module,exports){module.exports='/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n"use strict";\n\nfunction array_to_hash(a) {\n    var ret = Object.create(null);\n    for (var i = 0; i < a.length; ++i)\n        ret[a[i]] = true;\n    return ret;\n};\n\nfunction slice(a, start) {\n    return Array.prototype.slice.call(a, start || 0);\n};\n\nfunction characters(str) {\n    return str.split("");\n};\n\nfunction member(name, array) {\n    for (var i = array.length; --i >= 0;)\n        if (array[i] == name)\n            return true;\n    return false;\n};\n\nfunction find_if(func, array) {\n    for (var i = 0, n = array.length; i < n; ++i) {\n        if (func(array[i]))\n            return array[i];\n    }\n};\n\nfunction repeat_string(str, i) {\n    if (i <= 0) return "";\n    if (i == 1) return str;\n    var d = repeat_string(str, i >> 1);\n    d += d;\n    if (i & 1) d += str;\n    return d;\n};\n\nfunction DefaultsError(msg, defs) {\n    Error.call(this, msg);\n    this.msg = msg;\n    this.defs = defs;\n};\nDefaultsError.prototype = Object.create(Error.prototype);\nDefaultsError.prototype.constructor = DefaultsError;\n\nDefaultsError.croak = function(msg, defs) {\n    throw new DefaultsError(msg, defs);\n};\n\nfunction defaults(args, defs, croak) {\n    if (args === true)\n        args = {};\n    var ret = args || {};\n    if (croak) for (var i in ret) if (ret.hasOwnProperty(i) && !defs.hasOwnProperty(i))\n        DefaultsError.croak("`" + i + "` is not a supported option", defs);\n    for (var i in defs) if (defs.hasOwnProperty(i)) {\n        ret[i] = (args && args.hasOwnProperty(i)) ? args[i] : defs[i];\n    }\n    return ret;\n};\n\nfunction merge(obj, ext) {\n    var count = 0;\n    for (var i in ext) if (ext.hasOwnProperty(i)) {\n        obj[i] = ext[i];\n        count++;\n    }\n    return count;\n};\n\nfunction noop() {};\n\nvar MAP = (function(){\n    function MAP(a, f, backwards) {\n        var ret = [], top = [], i;\n        function doit() {\n            var val = f(a[i], i);\n            var is_last = val instanceof Last;\n            if (is_last) val = val.v;\n            if (val instanceof AtTop) {\n                val = val.v;\n                if (val instanceof Splice) {\n                    top.push.apply(top, backwards ? val.v.slice().reverse() : val.v);\n                } else {\n                    top.push(val);\n                }\n            }\n            else if (val !== skip) {\n                if (val instanceof Splice) {\n                    ret.push.apply(ret, backwards ? val.v.slice().reverse() : val.v);\n                } else {\n                    ret.push(val);\n                }\n            }\n            return is_last;\n        };\n        if (a instanceof Array) {\n            if (backwards) {\n                for (i = a.length; --i >= 0;) if (doit()) break;\n                ret.reverse();\n                top.reverse();\n            } else {\n                for (i = 0; i < a.length; ++i) if (doit()) break;\n            }\n        }\n        else {\n            for (i in a) if (a.hasOwnProperty(i)) if (doit()) break;\n        }\n        return top.concat(ret);\n    };\n    MAP.at_top = function(val) { return new AtTop(val) };\n    MAP.splice = function(val) { return new Splice(val) };\n    MAP.last = function(val) { return new Last(val) };\n    var skip = MAP.skip = {};\n    function AtTop(val) { this.v = val };\n    function Splice(val) { this.v = val };\n    function Last(val) { this.v = val };\n    return MAP;\n})();\n\nfunction push_uniq(array, el) {\n    if (array.indexOf(el) < 0)\n        array.push(el);\n};\n\nfunction string_template(text, props) {\n    return text.replace(/\\{(.+?)\\}/g, function(str, p){\n        return props[p];\n    });\n};\n\nfunction remove(array, el) {\n    for (var i = array.length; --i >= 0;) {\n        if (array[i] === el) array.splice(i, 1);\n    }\n};\n\nfunction mergeSort(array, cmp) {\n    if (array.length < 2) return array.slice();\n    function merge(a, b) {\n        var r = [], ai = 0, bi = 0, i = 0;\n        while (ai < a.length && bi < b.length) {\n            cmp(a[ai], b[bi]) <= 0\n                ? r[i++] = a[ai++]\n                : r[i++] = b[bi++];\n        }\n        if (ai < a.length) r.push.apply(r, a.slice(ai));\n        if (bi < b.length) r.push.apply(r, b.slice(bi));\n        return r;\n    };\n    function _ms(a) {\n        if (a.length <= 1)\n            return a;\n        var m = Math.floor(a.length / 2), left = a.slice(0, m), right = a.slice(m);\n        left = _ms(left);\n        right = _ms(right);\n        return merge(left, right);\n    };\n    return _ms(array);\n};\n\nfunction set_difference(a, b) {\n    return a.filter(function(el){\n        return b.indexOf(el) < 0;\n    });\n};\n\nfunction set_intersection(a, b) {\n    return a.filter(function(el){\n        return b.indexOf(el) >= 0;\n    });\n};\n\n// this function is taken from Acorn [1], written by Marijn Haverbeke\n// [1] https://github.com/marijnh/acorn\nfunction makePredicate(words) {\n    if (!(words instanceof Array)) words = words.split(" ");\n    var f = "", cats = [];\n    out: for (var i = 0; i < words.length; ++i) {\n        for (var j = 0; j < cats.length; ++j)\n            if (cats[j][0].length == words[i].length) {\n                cats[j].push(words[i]);\n                continue out;\n            }\n        cats.push([words[i]]);\n    }\n    function compareTo(arr) {\n        if (arr.length == 1) return f += "return str === " + JSON.stringify(arr[0]) + ";";\n        f += "switch(str){";\n        for (var i = 0; i < arr.length; ++i) f += "case " + JSON.stringify(arr[i]) + ":";\n        f += "return true}return false;";\n    }\n    // When there are more than three length categories, an outer\n    // switch first dispatches on the lengths, to save on comparisons.\n    if (cats.length > 3) {\n        cats.sort(function(a, b) {return b.length - a.length;});\n        f += "switch(str.length){";\n        for (var i = 0; i < cats.length; ++i) {\n            var cat = cats[i];\n            f += "case " + cat[0].length + ":";\n            compareTo(cat);\n        }\n        f += "}";\n        // Otherwise, simply generate a flat `switch` statement.\n    } else {\n        compareTo(words);\n    }\n    return new Function("str", f);\n};\n\nfunction all(array, predicate) {\n    for (var i = array.length; --i >= 0;)\n        if (!predicate(array[i]))\n            return false;\n    return true;\n};\n\nfunction Dictionary() {\n    this._values = Object.create(null);\n    this._size = 0;\n};\nDictionary.prototype = {\n    set: function(key, val) {\n        if (!this.has(key)) ++this._size;\n        this._values["$" + key] = val;\n        return this;\n    },\n    add: function(key, val) {\n        if (this.has(key)) {\n            this.get(key).push(val);\n        } else {\n            this.set(key, [ val ]);\n        }\n        return this;\n    },\n    get: function(key) { return this._values["$" + key] },\n    del: function(key) {\n        if (this.has(key)) {\n            --this._size;\n            delete this._values["$" + key];\n        }\n        return this;\n    },\n    has: function(key) { return ("$" + key) in this._values },\n    each: function(f) {\n        for (var i in this._values)\n            f(this._values[i], i.substr(1));\n    },\n    size: function() {\n        return this._size;\n    },\n    map: function(f) {\n        var ret = [];\n        for (var i in this._values)\n            ret.push(f(this._values[i], i.substr(1)));\n        return ret;\n    },\n    toObject: function() { return this._values }\n};\nDictionary.fromObject = function(obj) {\n    var dict = new Dictionary();\n    dict._size = merge(dict._values, obj);\n    return dict;\n};\n'},"./node_modules/raw-loader/index.js!./node_modules/uglify-js/lib/ast.js":function(module,exports){module.exports='/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n"use strict";\n\nfunction DEFNODE(type, props, methods, base) {\n    if (arguments.length < 4) base = AST_Node;\n    if (!props) props = [];\n    else props = props.split(/\\s+/);\n    var self_props = props;\n    if (base && base.PROPS)\n        props = props.concat(base.PROPS);\n    var code = "return function AST_" + type + "(props){ if (props) { ";\n    for (var i = props.length; --i >= 0;) {\n        code += "this." + props[i] + " = props." + props[i] + ";";\n    }\n    var proto = base && new base;\n    if (proto && proto.initialize || (methods && methods.initialize))\n        code += "this.initialize();";\n    code += "}}";\n    var ctor = new Function(code)();\n    if (proto) {\n        ctor.prototype = proto;\n        ctor.BASE = base;\n    }\n    if (base) base.SUBCLASSES.push(ctor);\n    ctor.prototype.CTOR = ctor;\n    ctor.PROPS = props || null;\n    ctor.SELF_PROPS = self_props;\n    ctor.SUBCLASSES = [];\n    if (type) {\n        ctor.prototype.TYPE = ctor.TYPE = type;\n    }\n    if (methods) for (i in methods) if (methods.hasOwnProperty(i)) {\n        if (/^\\$/.test(i)) {\n            ctor[i.substr(1)] = methods[i];\n        } else {\n            ctor.prototype[i] = methods[i];\n        }\n    }\n    ctor.DEFMETHOD = function(name, method) {\n        this.prototype[name] = method;\n    };\n    exports["AST_" + type] = ctor;\n    return ctor;\n};\n\nvar AST_Token = DEFNODE("Token", "type value line col pos endline endcol endpos nlb comments_before file", {\n}, null);\n\nvar AST_Node = DEFNODE("Node", "start end", {\n    clone: function() {\n        return new this.CTOR(this);\n    },\n    $documentation: "Base class of all AST nodes",\n    $propdoc: {\n        start: "[AST_Token] The first token of this node",\n        end: "[AST_Token] The last token of this node"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this);\n    },\n    walk: function(visitor) {\n        return this._walk(visitor); // not sure the indirection will be any help\n    }\n}, null);\n\nAST_Node.warn_function = null;\nAST_Node.warn = function(txt, props) {\n    if (AST_Node.warn_function)\n        AST_Node.warn_function(string_template(txt, props));\n};\n\n/* -----[ statements ]----- */\n\nvar AST_Statement = DEFNODE("Statement", null, {\n    $documentation: "Base class of all statements",\n});\n\nvar AST_Debugger = DEFNODE("Debugger", null, {\n    $documentation: "Represents a debugger statement",\n}, AST_Statement);\n\nvar AST_Directive = DEFNODE("Directive", "value scope quote", {\n    $documentation: "Represents a directive, like \\"use strict\\";",\n    $propdoc: {\n        value: "[string] The value of this directive as a plain string (it\'s not an AST_String!)",\n        scope: "[AST_Scope/S] The scope that this directive affects",\n        quote: "[string] the original quote character"\n    },\n}, AST_Statement);\n\nvar AST_SimpleStatement = DEFNODE("SimpleStatement", "body", {\n    $documentation: "A statement consisting of an expression, i.e. a = 1 + 2",\n    $propdoc: {\n        body: "[AST_Node] an expression node (should not be instanceof AST_Statement)"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.body._walk(visitor);\n        });\n    }\n}, AST_Statement);\n\nfunction walk_body(node, visitor) {\n    if (node.body instanceof AST_Node) {\n        node.body._walk(visitor);\n    }\n    else node.body.forEach(function(stat){\n        stat._walk(visitor);\n    });\n};\n\nvar AST_Block = DEFNODE("Block", "body", {\n    $documentation: "A body of statements (usually bracketed)",\n    $propdoc: {\n        body: "[AST_Statement*] an array of statements"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Statement);\n\nvar AST_BlockStatement = DEFNODE("BlockStatement", null, {\n    $documentation: "A block statement",\n}, AST_Block);\n\nvar AST_EmptyStatement = DEFNODE("EmptyStatement", null, {\n    $documentation: "The empty statement (empty block or simply a semicolon)",\n    _walk: function(visitor) {\n        return visitor._visit(this);\n    }\n}, AST_Statement);\n\nvar AST_StatementWithBody = DEFNODE("StatementWithBody", "body", {\n    $documentation: "Base class for all statements that contain one nested body: `For`, `ForIn`, `Do`, `While`, `With`",\n    $propdoc: {\n        body: "[AST_Statement] the body; this should always be present, even if it\'s an AST_EmptyStatement"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.body._walk(visitor);\n        });\n    }\n}, AST_Statement);\n\nvar AST_LabeledStatement = DEFNODE("LabeledStatement", "label", {\n    $documentation: "Statement with a label",\n    $propdoc: {\n        label: "[AST_Label] a label definition"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.label._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_StatementWithBody);\n\nvar AST_IterationStatement = DEFNODE("IterationStatement", null, {\n    $documentation: "Internal class.  All loops inherit from it."\n}, AST_StatementWithBody);\n\nvar AST_DWLoop = DEFNODE("DWLoop", "condition", {\n    $documentation: "Base class for do/while statements",\n    $propdoc: {\n        condition: "[AST_Node] the loop condition.  Should not be instanceof AST_Statement"\n    }\n}, AST_IterationStatement);\n\nvar AST_Do = DEFNODE("Do", null, {\n    $documentation: "A `do` statement",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.body._walk(visitor);\n            this.condition._walk(visitor);\n        });\n    }\n}, AST_DWLoop);\n\nvar AST_While = DEFNODE("While", null, {\n    $documentation: "A `while` statement",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_DWLoop);\n\nvar AST_For = DEFNODE("For", "init condition step", {\n    $documentation: "A `for` statement",\n    $propdoc: {\n        init: "[AST_Node?] the `for` initialization code, or null if empty",\n        condition: "[AST_Node?] the `for` termination clause, or null if empty",\n        step: "[AST_Node?] the `for` update clause, or null if empty"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            if (this.init) this.init._walk(visitor);\n            if (this.condition) this.condition._walk(visitor);\n            if (this.step) this.step._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_IterationStatement);\n\nvar AST_ForIn = DEFNODE("ForIn", "init name object", {\n    $documentation: "A `for ... in` statement",\n    $propdoc: {\n        init: "[AST_Node] the `for/in` initialization code",\n        name: "[AST_SymbolRef?] the loop variable, only if `init` is AST_Var",\n        object: "[AST_Node] the object that we\'re looping through"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.init._walk(visitor);\n            this.object._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_IterationStatement);\n\nvar AST_ForOf = DEFNODE("ForOf", null, {\n    $documentation: "A `for ... of` statement",\n}, AST_ForIn);\n\nvar AST_With = DEFNODE("With", "expression", {\n    $documentation: "A `with` statement",\n    $propdoc: {\n        expression: "[AST_Node] the `with` expression"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_StatementWithBody);\n\n/* -----[ scope and functions ]----- */\n\nvar AST_Scope = DEFNODE("Scope", "directives variables functions uses_with uses_eval parent_scope enclosed cname", {\n    $documentation: "Base class for all statements introducing a lexical scope",\n    $propdoc: {\n        directives: "[string*/S] an array of directives declared in this scope",\n        variables: "[Object/S] a map of name -> SymbolDef for all variables/functions defined in this scope",\n        functions: "[Object/S] like `variables`, but only lists function declarations",\n        uses_with: "[boolean/S] tells whether this scope uses the `with` statement",\n        uses_eval: "[boolean/S] tells whether this scope contains a direct call to the global `eval`",\n        parent_scope: "[AST_Scope?/S] link to the parent scope",\n        enclosed: "[SymbolDef*/S] a list of all symbol definitions that are accessed from this scope or any subscopes",\n        cname: "[integer/S] current index for mangling variables (used internally by the mangler)",\n    },\n}, AST_Block);\n\nvar AST_Toplevel = DEFNODE("Toplevel", "globals", {\n    $documentation: "The toplevel scope",\n    $propdoc: {\n        globals: "[Object/S] a map of name -> SymbolDef for all undeclared names",\n    },\n    wrap_enclose: function(arg_parameter_pairs) {\n        var self = this;\n        var args = [];\n        var parameters = [];\n\n        arg_parameter_pairs.forEach(function(pair) {\n            var splitAt = pair.lastIndexOf(":");\n\n            args.push(pair.substr(0, splitAt));\n            parameters.push(pair.substr(splitAt + 1));\n        });\n\n        var wrapped_tl = "(function(" + parameters.join(",") + "){ \'$ORIG\'; })(" + args.join(",") + ")";\n        wrapped_tl = parse(wrapped_tl);\n        wrapped_tl = wrapped_tl.transform(new TreeTransformer(function before(node){\n            if (node instanceof AST_Directive && node.value == "$ORIG") {\n                return MAP.splice(self.body);\n            }\n        }));\n        return wrapped_tl;\n    },\n    wrap_commonjs: function(name, export_all) {\n        var self = this;\n        var to_export = [];\n        if (export_all) {\n            self.figure_out_scope();\n            self.walk(new TreeWalker(function(node){\n                if (node instanceof AST_SymbolDeclaration && node.definition().global) {\n                    if (!find_if(function(n){ return n.name == node.name }, to_export))\n                        to_export.push(node);\n                }\n            }));\n        }\n        var wrapped_tl = "(function(exports, global){ \'$ORIG\'; \'$EXPORTS\'; global[\'" + name + "\'] = exports; }({}, (function(){return this}())))";\n        wrapped_tl = parse(wrapped_tl);\n        wrapped_tl = wrapped_tl.transform(new TreeTransformer(function before(node){\n            if (node instanceof AST_Directive) {\n                switch (node.value) {\n                  case "$ORIG":\n                    return MAP.splice(self.body);\n                  case "$EXPORTS":\n                    var body = [];\n                    to_export.forEach(function(sym){\n                        body.push(new AST_SimpleStatement({\n                            body: new AST_Assign({\n                                left: new AST_Sub({\n                                    expression: new AST_SymbolRef({ name: "exports" }),\n                                    property: new AST_String({ value: sym.name }),\n                                }),\n                                operator: "=",\n                                right: new AST_SymbolRef(sym),\n                            }),\n                        }));\n                    });\n                    return MAP.splice(body);\n                }\n            }\n        }));\n        return wrapped_tl;\n    }\n}, AST_Scope);\n\nvar AST_Expansion = DEFNODE("Expansion", "symbol", {\n    $documentation: "An expandible argument, such as ...rest, a splat, such as [1,2,...all], or an expansion in a variable declaration, such as var [first, ...rest] = list",\n    $propdoc: {\n        symbol: "AST_Symbol the thing to be expanded"\n    },\n    _walk: function(visitor) {\n        var self = this;\n        return visitor._visit(this, function(){\n            self.symbol.walk(visitor);\n        });\n    }\n});\n\nvar AST_ArrowParametersOrSeq = DEFNODE("ArrowParametersOrSeq", "expressions", {\n    $documentation: "A set of arrow function parameters or a sequence expression. This is used because when the parser sees a \\"(\\" it could be the start of a seq, or the start of a parameter list of an arrow function.",\n    $propdoc: {\n        expressions: "[AST_Expression|AST_Destructuring|AST_Expansion*] array of expressions or argument names or destructurings."\n    },\n    as_params: function (croak) {\n        // We don\'t want anything which doesn\'t belong in a destructuring\n        var root = this;\n        return this.expressions.map(function to_fun_args(ex) {\n            if (ex instanceof AST_Object) {\n                if (ex.properties.length == 0)\n                    croak("Invalid destructuring function parameter", ex.start.line, ex.start.col);\n                return new AST_Destructuring({\n                    start: ex.start,\n                    end: ex.end,\n                    is_array: false,\n                    names: ex.properties.map(to_fun_args)\n                });\n            } else if (ex instanceof AST_ObjectSymbol) {\n                return new AST_SymbolFunarg({\n                    name: ex.symbol.name,\n                    start: ex.start,\n                    end: ex.end\n                });\n            } else if (ex instanceof AST_Destructuring) {\n                if (ex.names.length == 0)\n                    croak("Invalid destructuring function parameter", ex.start.line, ex.start.col);\n                ex.names = ex.names.map(to_fun_args);\n                return ex;\n            } else if (ex instanceof AST_SymbolRef) {\n                return new AST_SymbolFunarg({\n                    name: ex.name,\n                    start: ex.start,\n                    end: ex.end\n                });\n            } else if (ex instanceof AST_Expansion) {\n                return ex;\n            } else if (ex instanceof AST_Array) {\n                if (ex.elements.length === 0)\n                    croak("Invalid destructuring function parameter", ex.start.line, ex.start.col);\n                return new AST_Destructuring({\n                    start: ex.start,\n                    end: ex.end,\n                    is_array: true,\n                    names: ex.elements.map(to_fun_args)\n                });\n            } else {\n                croak("Invalid function parameter", ex.start.line, ex.start.col);\n            }\n        });\n    },\n    as_expr: function (croak) {\n        return AST_Seq.from_array(this.expressions);\n    }\n});\n\nvar AST_Lambda = DEFNODE("Lambda", "name argnames uses_arguments", {\n    $documentation: "Base class for functions",\n    $propdoc: {\n        name: "[AST_SymbolDeclaration?] the name of this function",\n        argnames: "[AST_SymbolFunarg|AST_Destructuring|AST_Expansion*] array of function arguments, destructurings, or expanding arguments",\n        uses_arguments: "[boolean/S] tells whether this function accesses the arguments array"\n    },\n    args_as_names: function () {\n        var out = [];\n        for (var i = 0; i < this.argnames.length; i++) {\n            if (this.argnames[i] instanceof AST_Destructuring) {\n                out = out.concat(this.argnames[i].all_symbols());\n            } else {\n                out.push(this.argnames[i]);\n            }\n        }\n        return out;\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            if (this.name) this.name._walk(visitor);\n            this.argnames.forEach(function(arg){\n                arg._walk(visitor);\n            });\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Scope);\n\nvar AST_Accessor = DEFNODE("Accessor", null, {\n    $documentation: "A setter/getter function.  The `name` property is always null."\n}, AST_Lambda);\n\nvar AST_Function = DEFNODE("Function", null, {\n    $documentation: "A function expression"\n}, AST_Lambda);\n\nvar AST_Arrow = DEFNODE("Arrow", null, {\n    $documentation: "An ES6 Arrow function ((a) => b)"\n}, AST_Lambda);\n\nvar AST_ConciseMethod = DEFNODE("ConciseMethod", "static", {\n    $propdoc: {\n        static: "[boolean] whether this method is static (classes only)",\n    },\n    $documentation: "An ES6 concise method inside an object or class"\n}, AST_Lambda);\n\nvar AST_Defun = DEFNODE("Defun", null, {\n    $documentation: "A function definition"\n}, AST_Lambda);\n\n/* -----[ DESTRUCTURING ]----- */\nvar AST_Destructuring = DEFNODE("Destructuring", "names is_array", {\n    $documentation: "A destructuring of several names. Used in destructuring assignment and with destructuring function argument names",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.names.forEach(function(name){\n                name._walk(visitor);\n            });\n        });\n    },\n    all_symbols: function() {\n        var out = [];\n        this.walk(new TreeWalker(function (node) {\n            if (node instanceof AST_Symbol) {\n                out.push(node);\n            }\n            if (node instanceof AST_Expansion) {\n                out.push(node.symbol);\n            }\n        }));\n        return out;\n    }\n});\n\nvar AST_PrefixedTemplateString = DEFNODE("PrefixedTemplateString", "template_string prefix", {\n    $documentation: "A templatestring with a prefix, such as String.raw`foobarbaz`",\n    $propdoc: {\n        template_string: "[AST_TemplateString] The template string",\n        prefix: "[AST_SymbolRef|AST_PropAccess] The prefix, which can be a symbol such as `foo` or a dotted expression such as `String.raw`."\n    },\n    _walk: function(visitor) {\n        this.prefix._walk(visitor);\n        this.template_string._walk(visitor);\n    }\n})\n\nvar AST_TemplateString = DEFNODE("TemplateString", "segments", {\n    $documentation: "A template string literal",\n    $propdoc: {\n        segments: "[string|AST_Expression]* One or more segments. They can be the parts that are evaluated, or the raw string parts."\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.segments.forEach(function(seg, i){\n                if (i % 2 !== 0) {\n                    seg._walk(visitor);\n                }\n            });\n        });\n    }\n});\n\n/* -----[ JUMPS ]----- */\n\nvar AST_Jump = DEFNODE("Jump", null, {\n    $documentation: "Base class for “jumps” (for now that\'s `return`, `throw`, `break` and `continue`)"\n}, AST_Statement);\n\nvar AST_Exit = DEFNODE("Exit", "value", {\n    $documentation: "Base class for “exits” (`return` and `throw`)",\n    $propdoc: {\n        value: "[AST_Node?] the value returned or thrown by this statement; could be null for AST_Return"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.value && function(){\n            this.value._walk(visitor);\n        });\n    }\n}, AST_Jump);\n\nvar AST_Return = DEFNODE("Return", null, {\n    $documentation: "A `return` statement"\n}, AST_Exit);\n\nvar AST_Throw = DEFNODE("Throw", null, {\n    $documentation: "A `throw` statement"\n}, AST_Exit);\n\nvar AST_LoopControl = DEFNODE("LoopControl", "label", {\n    $documentation: "Base class for loop control statements (`break` and `continue`)",\n    $propdoc: {\n        label: "[AST_LabelRef?] the label, or null if none",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.label && function(){\n            this.label._walk(visitor);\n        });\n    }\n}, AST_Jump);\n\nvar AST_Break = DEFNODE("Break", null, {\n    $documentation: "A `break` statement"\n}, AST_LoopControl);\n\nvar AST_Continue = DEFNODE("Continue", null, {\n    $documentation: "A `continue` statement"\n}, AST_LoopControl);\n\n/* -----[ IF ]----- */\n\nvar AST_If = DEFNODE("If", "condition alternative", {\n    $documentation: "A `if` statement",\n    $propdoc: {\n        condition: "[AST_Node] the `if` condition",\n        alternative: "[AST_Statement?] the `else` part, or null if not present"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n            if (this.alternative) this.alternative._walk(visitor);\n        });\n    }\n}, AST_StatementWithBody);\n\n/* -----[ SWITCH ]----- */\n\nvar AST_Switch = DEFNODE("Switch", "expression", {\n    $documentation: "A `switch` statement",\n    $propdoc: {\n        expression: "[AST_Node] the `switch` “discriminant”"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_SwitchBranch = DEFNODE("SwitchBranch", null, {\n    $documentation: "Base class for `switch` branches",\n}, AST_Block);\n\nvar AST_Default = DEFNODE("Default", null, {\n    $documentation: "A `default` switch branch",\n}, AST_SwitchBranch);\n\nvar AST_Case = DEFNODE("Case", "expression", {\n    $documentation: "A `case` switch branch",\n    $propdoc: {\n        expression: "[AST_Node] the `case` expression"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_SwitchBranch);\n\n/* -----[ EXCEPTIONS ]----- */\n\nvar AST_Try = DEFNODE("Try", "bcatch bfinally", {\n    $documentation: "A `try` statement",\n    $propdoc: {\n        bcatch: "[AST_Catch?] the catch block, or null if not present",\n        bfinally: "[AST_Finally?] the finally block, or null if not present"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            walk_body(this, visitor);\n            if (this.bcatch) this.bcatch._walk(visitor);\n            if (this.bfinally) this.bfinally._walk(visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_Catch = DEFNODE("Catch", "argname", {\n    $documentation: "A `catch` node; only makes sense as part of a `try` statement",\n    $propdoc: {\n        argname: "[AST_SymbolCatch] symbol for the exception"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.argname._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_Finally = DEFNODE("Finally", null, {\n    $documentation: "A `finally` node; only makes sense as part of a `try` statement"\n}, AST_Block);\n\n/* -----[ VAR/CONST ]----- */\n\nvar AST_Definitions = DEFNODE("Definitions", "definitions", {\n    $documentation: "Base class for `var` or `const` nodes (variable declarations/initializations)",\n    $propdoc: {\n        definitions: "[AST_VarDef*] array of variable definitions"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.definitions.forEach(function(def){\n                def._walk(visitor);\n            });\n        });\n    }\n}, AST_Statement);\n\nvar AST_Var = DEFNODE("Var", null, {\n    $documentation: "A `var` statement"\n}, AST_Definitions);\n\nvar AST_Let = DEFNODE("Let", null, {\n    $documentation: "A `let` statement"\n}, AST_Definitions);\n\nvar AST_Const = DEFNODE("Const", null, {\n    $documentation: "A `const` statement"\n}, AST_Definitions);\n\nvar AST_VarDef = DEFNODE("VarDef", "name value", {\n    $documentation: "A variable declaration; only appears in a AST_Definitions node",\n    $propdoc: {\n        name: "[AST_SymbolVar|AST_SymbolConst|AST_Destructuring] name of the variable",\n        value: "[AST_Node?] initializer, or null of there\'s no initializer"\n    },\n    is_destructuring: function() {\n        return this.name instanceof AST_Destructuring;\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.name._walk(visitor);\n            if (this.value) this.value._walk(visitor);\n        });\n    }\n});\n\n/* -----[ OTHER ]----- */\n\nvar AST_Call = DEFNODE("Call", "expression args", {\n    $documentation: "A function call expression",\n    $propdoc: {\n        expression: "[AST_Node] expression to invoke as function",\n        args: "[AST_Node*] array of arguments"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            this.args.forEach(function(arg){\n                arg._walk(visitor);\n            });\n        });\n    }\n});\n\nvar AST_New = DEFNODE("New", null, {\n    $documentation: "An object instantiation.  Derives from a function call since it has exactly the same properties"\n}, AST_Call);\n\nvar AST_Seq = DEFNODE("Seq", "car cdr", {\n    $documentation: "A sequence expression (two comma-separated expressions)",\n    $propdoc: {\n        car: "[AST_Node] first element in sequence",\n        cdr: "[AST_Node] second element in sequence"\n    },\n    $cons: function(x, y) {\n        var seq = new AST_Seq(x);\n        seq.car = x;\n        seq.cdr = y;\n        return seq;\n    },\n    $from_array: function(array) {\n        if (array.length == 0) return null;\n        if (array.length == 1) return array[0].clone();\n        var list = null;\n        for (var i = array.length; --i >= 0;) {\n            list = AST_Seq.cons(array[i], list);\n        }\n        var p = list;\n        while (p) {\n            if (p.cdr && !p.cdr.cdr) {\n                p.cdr = p.cdr.car;\n                break;\n            }\n            p = p.cdr;\n        }\n        return list;\n    },\n    to_array: function() {\n        var p = this, a = [];\n        while (p) {\n            a.push(p.car);\n            if (p.cdr && !(p.cdr instanceof AST_Seq)) {\n                a.push(p.cdr);\n                break;\n            }\n            p = p.cdr;\n        }\n        return a;\n    },\n    add: function(node) {\n        var p = this;\n        while (p) {\n            if (!(p.cdr instanceof AST_Seq)) {\n                var cell = AST_Seq.cons(p.cdr, node);\n                return p.cdr = cell;\n            }\n            p = p.cdr;\n        }\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.car._walk(visitor);\n            if (this.cdr) this.cdr._walk(visitor);\n        });\n    }\n});\n\nvar AST_PropAccess = DEFNODE("PropAccess", "expression property", {\n    $documentation: "Base class for property access expressions, i.e. `a.foo` or `a[\\"foo\\"]`",\n    $propdoc: {\n        expression: "[AST_Node] the “container” expression",\n        property: "[AST_Node|string] the property to access.  For AST_Dot this is always a plain string, while for AST_Sub it\'s an arbitrary AST_Node"\n    }\n});\n\nvar AST_Dot = DEFNODE("Dot", null, {\n    $documentation: "A dotted property access expression",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n        });\n    }\n}, AST_PropAccess);\n\nvar AST_Sub = DEFNODE("Sub", null, {\n    $documentation: "Index-style property access, i.e. `a[\\"foo\\"]`",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n            this.property._walk(visitor);\n        });\n    }\n}, AST_PropAccess);\n\nvar AST_Unary = DEFNODE("Unary", "operator expression", {\n    $documentation: "Base class for unary expressions",\n    $propdoc: {\n        operator: "[string] the operator",\n        expression: "[AST_Node] expression that this unary operator applies to"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.expression._walk(visitor);\n        });\n    }\n});\n\nvar AST_UnaryPrefix = DEFNODE("UnaryPrefix", null, {\n    $documentation: "Unary prefix expression, i.e. `typeof i` or `++i`"\n}, AST_Unary);\n\nvar AST_UnaryPostfix = DEFNODE("UnaryPostfix", null, {\n    $documentation: "Unary postfix expression, i.e. `i++`"\n}, AST_Unary);\n\nvar AST_Binary = DEFNODE("Binary", "left operator right", {\n    $documentation: "Binary expression, i.e. `a + b`",\n    $propdoc: {\n        left: "[AST_Node] left-hand side expression",\n        operator: "[string] the operator",\n        right: "[AST_Node] right-hand side expression"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.left._walk(visitor);\n            this.right._walk(visitor);\n        });\n    }\n});\n\nvar AST_Conditional = DEFNODE("Conditional", "condition consequent alternative", {\n    $documentation: "Conditional expression using the ternary operator, i.e. `a ? b : c`",\n    $propdoc: {\n        condition: "[AST_Node]",\n        consequent: "[AST_Node]",\n        alternative: "[AST_Node]"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.condition._walk(visitor);\n            this.consequent._walk(visitor);\n            this.alternative._walk(visitor);\n        });\n    }\n});\n\nvar AST_Assign = DEFNODE("Assign", null, {\n    $documentation: "An assignment expression — `a = b + 5`",\n}, AST_Binary);\n\n/* -----[ LITERALS ]----- */\n\nvar AST_Array = DEFNODE("Array", "elements", {\n    $documentation: "An array literal",\n    $propdoc: {\n        elements: "[AST_Node*] array of elements"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.elements.forEach(function(el){\n                el._walk(visitor);\n            });\n        });\n    }\n});\n\nvar AST_Object = DEFNODE("Object", "properties", {\n    $documentation: "An object literal",\n    $propdoc: {\n        properties: "[AST_ObjectProperty*] array of properties"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.properties.forEach(function(prop){\n                prop._walk(visitor);\n            });\n        });\n    }\n});\n\nvar AST_ObjectProperty = DEFNODE("ObjectProperty", "key value", {\n    $documentation: "Base class for literal object properties",\n    $propdoc: {\n        key: "[string] the property name converted to a string for ObjectKeyVal.  For setters and getters this is an arbitrary AST_Node.",\n        value: "[AST_Node] property value.  For setters and getters this is an AST_Function."\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.value._walk(visitor);\n        });\n    }\n});\n\nvar AST_ObjectKeyVal = DEFNODE("ObjectKeyVal", "quote", {\n    $documentation: "A key: value object property",\n    $propdoc: {\n        quote: "[string] the original quote character"\n    }\n}, AST_ObjectProperty);\n\nvar AST_ObjectComputedKeyVal = DEFNODE("ObjectComputedKeyVal", null, {\n    $documentation: "An object property whose key is computed. Like `[Symbol.iterator]: function...` or `[routes.homepage]: renderHomepage`",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            this.key._walk(visitor);\n            this.value._walk(visitor);\n        });\n    }\n}, AST_ObjectProperty);\n\nvar AST_ObjectSymbol = DEFNODE("ObjectSymbol", "symbol", {\n    $propdoc: {\n        symbol: "[AST_SymbolRef] what symbol it is"\n    },\n    $documentation: "A symbol in an object",\n    _walk: function (visitor) {\n        return visitor._visit(this, function(){\n            this.symbol._walk(visitor);\n        });\n    }\n}, AST_ObjectProperty);\n\nvar AST_ObjectSetter = DEFNODE("ObjectSetter", "static", {\n    $propdoc: {\n        static: "[boolean] whether this is a static setter (classes only)"\n    },\n    $documentation: "An object setter property",\n}, AST_ObjectProperty);\n\nvar AST_ObjectGetter = DEFNODE("ObjectGetter", "static", {\n    $propdoc: {\n        static: "[boolean] whether this is a static getter (classes only)"\n    },\n    $documentation: "An object getter property",\n}, AST_ObjectProperty);\n\nvar AST_Class = DEFNODE("Class", "name extends properties", {\n    $propdoc: {\n        name: "[AST_SymbolClass|AST_SymbolDefClass?] optional class name.",\n        extends: "[AST_Node]? optional parent class",\n        properties: "[AST_ObjectProperty*] array of properties"\n    },\n    $documentation: "An ES6 class",\n    _walk: function(visitor) {\n        return visitor._visit(this, function(){\n            if (this.name) {\n                this.name._walk(visitor);\n            }\n            if (this.extends) {\n                this.extends._walk(visitor);\n            }\n            this.properties.forEach(function(prop){\n                prop._walk(visitor);\n            });\n        });\n    },\n}, AST_Scope);\n\nvar AST_DefClass = DEFNODE("DefClass", null, {\n    $documentation: "A class definition",\n}, AST_Class);\n\nvar AST_ClassExpression = DEFNODE("ClassExpression", null, {\n    $documentation: "A class expression."\n}, AST_Class);\n\nvar AST_Symbol = DEFNODE("Symbol", "scope name thedef", {\n    $propdoc: {\n        name: "[string] name of this symbol",\n        scope: "[AST_Scope/S] the current scope (not necessarily the definition scope)",\n        thedef: "[SymbolDef/S] the definition of this symbol"\n    },\n    $documentation: "Base class for all symbols",\n});\n\nvar AST_NewTarget = DEFNODE("NewTarget", null, {\n    $documentation: "A reference to new.target"\n});\n\nvar AST_SymbolAccessor = DEFNODE("SymbolAccessor", null, {\n    $documentation: "The name of a property accessor (setter/getter function)"\n}, AST_Symbol);\n\nvar AST_SymbolDeclaration = DEFNODE("SymbolDeclaration", "init", {\n    $documentation: "A declaration symbol (symbol in var/const, function name or argument, symbol in catch)",\n    $propdoc: {\n        init: "[AST_Node*/S] array of initializers for this declaration."\n    }\n}, AST_Symbol);\n\nvar AST_SymbolVar = DEFNODE("SymbolVar", null, {\n    $documentation: "Symbol defining a variable",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolConst = DEFNODE("SymbolConst", null, {\n    $documentation: "A constant declaration"\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolFunarg = DEFNODE("SymbolFunarg", null, {\n    $documentation: "Symbol naming a function argument",\n}, AST_SymbolVar);\n\nvar AST_SymbolDefun = DEFNODE("SymbolDefun", null, {\n    $documentation: "Symbol defining a function",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolMethod = DEFNODE("SymbolMethod", null, {\n    $documentation: "Symbol in an object defining a method",\n}, AST_Symbol);\n\nvar AST_SymbolLambda = DEFNODE("SymbolLambda", null, {\n    $documentation: "Symbol naming a function expression",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolDefClass = DEFNODE("SymbolDefClass", null, {\n    $documentation: "Symbol naming a class\'s name in a class declaration. Lexically scoped to its containing scope, and accessible within the class."\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolClass = DEFNODE("SymbolClass", null, {\n    $documentation: "Symbol naming a class\'s name. Lexically scoped to the class."\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolCatch = DEFNODE("SymbolCatch", null, {\n    $documentation: "Symbol naming the exception in catch",\n}, AST_SymbolDeclaration);\n\nvar AST_Label = DEFNODE("Label", "references", {\n    $documentation: "Symbol naming a label (declaration)",\n    $propdoc: {\n        references: "[AST_LoopControl*] a list of nodes referring to this label"\n    },\n    initialize: function() {\n        this.references = [];\n        this.thedef = this;\n    }\n}, AST_Symbol);\n\nvar AST_SymbolRef = DEFNODE("SymbolRef", null, {\n    $documentation: "Reference to some symbol (not definition/declaration)",\n}, AST_Symbol);\n\nvar AST_LabelRef = DEFNODE("LabelRef", null, {\n    $documentation: "Reference to a label symbol",\n}, AST_Symbol);\n\nvar AST_This = DEFNODE("This", null, {\n    $documentation: "The `this` symbol",\n}, AST_Symbol);\n\nvar AST_Super = DEFNODE("Super", null, {\n    $documentation: "The `super` symbol",\n}, AST_Symbol);\n\nvar AST_Constant = DEFNODE("Constant", null, {\n    $documentation: "Base class for all constants",\n    getValue: function() {\n        return this.value;\n    }\n});\n\nvar AST_String = DEFNODE("String", "value quote", {\n    $documentation: "A string literal",\n    $propdoc: {\n        value: "[string] the contents of this string",\n        quote: "[string] the original quote character"\n    }\n}, AST_Constant);\n\nvar AST_Number = DEFNODE("Number", "value literal", {\n    $documentation: "A number literal",\n    $propdoc: {\n        value: "[number] the numeric value",\n        literal: "[string] numeric value as string (optional)"\n    }\n}, AST_Constant);\n\nvar AST_RegExp = DEFNODE("RegExp", "value", {\n    $documentation: "A regexp literal",\n    $propdoc: {\n        value: "[RegExp] the actual regexp"\n    }\n}, AST_Constant);\n\nvar AST_Atom = DEFNODE("Atom", null, {\n    $documentation: "Base class for atoms",\n}, AST_Constant);\n\nvar AST_Null = DEFNODE("Null", null, {\n    $documentation: "The `null` atom",\n    value: null\n}, AST_Atom);\n\nvar AST_NaN = DEFNODE("NaN", null, {\n    $documentation: "The impossible value",\n    value: 0/0\n}, AST_Atom);\n\nvar AST_Undefined = DEFNODE("Undefined", null, {\n    $documentation: "The `undefined` value",\n    value: (function(){}())\n}, AST_Atom);\n\nvar AST_Hole = DEFNODE("Hole", null, {\n    $documentation: "A hole in an array",\n    value: (function(){}())\n}, AST_Atom);\n\nvar AST_Infinity = DEFNODE("Infinity", null, {\n    $documentation: "The `Infinity` value",\n    value: 1/0\n}, AST_Atom);\n\nvar AST_Boolean = DEFNODE("Boolean", null, {\n    $documentation: "Base class for booleans",\n}, AST_Atom);\n\nvar AST_False = DEFNODE("False", null, {\n    $documentation: "The `false` atom",\n    value: false\n}, AST_Boolean);\n\nvar AST_True = DEFNODE("True", null, {\n    $documentation: "The `true` atom",\n    value: true\n}, AST_Boolean);\n\n/* -----[ TreeWalker ]----- */\n\nfunction TreeWalker(callback) {\n    this.visit = callback;\n    this.stack = [];\n};\nTreeWalker.prototype = {\n    _visit: function(node, descend) {\n        this.stack.push(node);\n        var ret = this.visit(node, descend ? function(){\n            descend.call(node);\n        } : noop);\n        if (!ret && descend) {\n            descend.call(node);\n        }\n        this.stack.pop();\n        return ret;\n    },\n    parent: function(n) {\n        return this.stack[this.stack.length - 2 - (n || 0)];\n    },\n    push: function (node) {\n        this.stack.push(node);\n    },\n    pop: function() {\n        return this.stack.pop();\n    },\n    self: function() {\n        return this.stack[this.stack.length - 1];\n    },\n    find_parent: function(type) {\n        var stack = this.stack;\n        for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof type) return x;\n        }\n    },\n    has_directive: function(type) {\n        return this.find_parent(AST_Scope).has_directive(type);\n    },\n    in_boolean_context: function() {\n        var stack = this.stack;\n        var i = stack.length, self = stack[--i];\n        while (i > 0) {\n            var p = stack[--i];\n            if ((p instanceof AST_If           && p.condition === self) ||\n                (p instanceof AST_Conditional  && p.condition === self) ||\n                (p instanceof AST_DWLoop       && p.condition === self) ||\n                (p instanceof AST_For          && p.condition === self) ||\n                (p instanceof AST_UnaryPrefix  && p.operator == "!" && p.expression === self))\n            {\n                return true;\n            }\n            if (!(p instanceof AST_Binary && (p.operator == "&&" || p.operator == "||")))\n                return false;\n            self = p;\n        }\n    },\n    loopcontrol_target: function(label) {\n        var stack = this.stack;\n        if (label) for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_LabeledStatement && x.label.name == label.name) {\n                return x.body;\n            }\n        } else for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_Switch || x instanceof AST_IterationStatement)\n                return x;\n        }\n    }\n};\n';
},"./node_modules/raw-loader/index.js!./node_modules/uglify-js/lib/parse.js":function(module,exports){module.exports='/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n    Parser based on parse-js (http://marijn.haverbeke.nl/parse-js/).\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n"use strict";\n\nvar KEYWORDS = \'break case catch class const continue debugger default delete do else extends finally for function if in instanceof new return switch throw try typeof var let void while with\';\nvar KEYWORDS_ATOM = \'false null true\';\nvar RESERVED_WORDS = \'abstract boolean byte char double enum export final float goto implements import int interface long native package private protected public short static super synchronized this throws transient volatile yield\'\n    + " " + KEYWORDS_ATOM + " " + KEYWORDS;\nvar KEYWORDS_BEFORE_EXPRESSION = \'return new delete throw else case\';\n\nKEYWORDS = makePredicate(KEYWORDS);\nRESERVED_WORDS = makePredicate(RESERVED_WORDS);\nKEYWORDS_BEFORE_EXPRESSION = makePredicate(KEYWORDS_BEFORE_EXPRESSION);\nKEYWORDS_ATOM = makePredicate(KEYWORDS_ATOM);\n\nvar OPERATOR_CHARS = makePredicate(characters("+-*&%=<>!?|~^"));\n\nvar RE_HEX_NUMBER = /^0x[0-9a-f]+$/i;\nvar RE_OCT_NUMBER = /^0[0-7]+$/;\nvar RE_ES6_OCT_NUMBER = /^0o[0-7]+$/i;\nvar RE_BIN_NUMBER = /^0b[01]+$/i;\nvar RE_DEC_NUMBER = /^\\d*\\.?\\d*(?:e[+-]?\\d*(?:\\d\\.?|\\.?\\d)\\d*)?$/i;\n\nvar OPERATORS = makePredicate([\n    "in",\n    "instanceof",\n    "typeof",\n    "new",\n    "void",\n    "delete",\n    "++",\n    "--",\n    "+",\n    "-",\n    "!",\n    "~",\n    "&",\n    "|",\n    "^",\n    "*",\n    "/",\n    "%",\n    ">>",\n    "<<",\n    ">>>",\n    "<",\n    ">",\n    "<=",\n    ">=",\n    "==",\n    "===",\n    "!=",\n    "!==",\n    "?",\n    "=",\n    "+=",\n    "-=",\n    "/=",\n    "*=",\n    "%=",\n    ">>=",\n    "<<=",\n    ">>>=",\n    "|=",\n    "^=",\n    "&=",\n    "&&",\n    "||"\n]);\n\nvar WHITESPACE_CHARS = makePredicate(characters(" \\u00a0\\n\\r\\t\\f\\u000b\\u200b\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\uFEFF"));\n\nvar PUNC_BEFORE_EXPRESSION = makePredicate(characters("[{(,.;:"));\n\nvar PUNC_CHARS = makePredicate(characters("[]{}(),;:`"));\n\nvar REGEXP_MODIFIERS = makePredicate(characters("gmsiy"));\n\n/* -----[ Tokenizer ]----- */\n\n// regexps adapted from http://xregexp.com/plugins/#unicode\nvar UNICODE = {\n    letter: new RegExp("[\\\\u0041-\\\\u005A\\\\u0061-\\\\u007A\\\\u00AA\\\\u00B5\\\\u00BA\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u08A0-\\\\u08B2\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58\\\\u0C59\\\\u0C60\\\\u0C61\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D60\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1877\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19C1-\\\\u19C7\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF1\\\\u1CF5\\\\u1CF6\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6EF\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]"),\n    digit: new RegExp("[\\\\u0030-\\\\u0039\\\\u0660-\\\\u0669\\\\u06F0-\\\\u06F9\\\\u07C0-\\\\u07C9\\\\u0966-\\\\u096F\\\\u09E6-\\\\u09EF\\\\u0A66-\\\\u0A6F\\\\u0AE6-\\\\u0AEF\\\\u0B66-\\\\u0B6F\\\\u0BE6-\\\\u0BEF\\\\u0C66-\\\\u0C6F\\\\u0CE6-\\\\u0CEF\\\\u0D66-\\\\u0D6F\\\\u0DE6-\\\\u0DEF\\\\u0E50-\\\\u0E59\\\\u0ED0-\\\\u0ED9\\\\u0F20-\\\\u0F29\\\\u1040-\\\\u1049\\\\u1090-\\\\u1099\\\\u17E0-\\\\u17E9\\\\u1810-\\\\u1819\\\\u1946-\\\\u194F\\\\u19D0-\\\\u19D9\\\\u1A80-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1B50-\\\\u1B59\\\\u1BB0-\\\\u1BB9\\\\u1C40-\\\\u1C49\\\\u1C50-\\\\u1C59\\\\uA620-\\\\uA629\\\\uA8D0-\\\\uA8D9\\\\uA900-\\\\uA909\\\\uA9D0-\\\\uA9D9\\\\uA9F0-\\\\uA9F9\\\\uAA50-\\\\uAA59\\\\uABF0-\\\\uABF9\\\\uFF10-\\\\uFF19]"),\n    non_spacing_mark: new RegExp("[\\\\u0300-\\\\u036F\\\\u0483-\\\\u0487\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u0610-\\\\u061A\\\\u064B-\\\\u065E\\\\u0670\\\\u06D6-\\\\u06DC\\\\u06DF-\\\\u06E4\\\\u06E7\\\\u06E8\\\\u06EA-\\\\u06ED\\\\u0711\\\\u0730-\\\\u074A\\\\u07A6-\\\\u07B0\\\\u07EB-\\\\u07F3\\\\u0816-\\\\u0819\\\\u081B-\\\\u0823\\\\u0825-\\\\u0827\\\\u0829-\\\\u082D\\\\u0900-\\\\u0902\\\\u093C\\\\u0941-\\\\u0948\\\\u094D\\\\u0951-\\\\u0955\\\\u0962\\\\u0963\\\\u0981\\\\u09BC\\\\u09C1-\\\\u09C4\\\\u09CD\\\\u09E2\\\\u09E3\\\\u0A01\\\\u0A02\\\\u0A3C\\\\u0A41\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A70\\\\u0A71\\\\u0A75\\\\u0A81\\\\u0A82\\\\u0ABC\\\\u0AC1-\\\\u0AC5\\\\u0AC7\\\\u0AC8\\\\u0ACD\\\\u0AE2\\\\u0AE3\\\\u0B01\\\\u0B3C\\\\u0B3F\\\\u0B41-\\\\u0B44\\\\u0B4D\\\\u0B56\\\\u0B62\\\\u0B63\\\\u0B82\\\\u0BC0\\\\u0BCD\\\\u0C3E-\\\\u0C40\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C62\\\\u0C63\\\\u0CBC\\\\u0CBF\\\\u0CC6\\\\u0CCC\\\\u0CCD\\\\u0CE2\\\\u0CE3\\\\u0D41-\\\\u0D44\\\\u0D4D\\\\u0D62\\\\u0D63\\\\u0DCA\\\\u0DD2-\\\\u0DD4\\\\u0DD6\\\\u0E31\\\\u0E34-\\\\u0E3A\\\\u0E47-\\\\u0E4E\\\\u0EB1\\\\u0EB4-\\\\u0EB9\\\\u0EBB\\\\u0EBC\\\\u0EC8-\\\\u0ECD\\\\u0F18\\\\u0F19\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F71-\\\\u0F7E\\\\u0F80-\\\\u0F84\\\\u0F86\\\\u0F87\\\\u0F90-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u102D-\\\\u1030\\\\u1032-\\\\u1037\\\\u1039\\\\u103A\\\\u103D\\\\u103E\\\\u1058\\\\u1059\\\\u105E-\\\\u1060\\\\u1071-\\\\u1074\\\\u1082\\\\u1085\\\\u1086\\\\u108D\\\\u109D\\\\u135F\\\\u1712-\\\\u1714\\\\u1732-\\\\u1734\\\\u1752\\\\u1753\\\\u1772\\\\u1773\\\\u17B7-\\\\u17BD\\\\u17C6\\\\u17C9-\\\\u17D3\\\\u17DD\\\\u180B-\\\\u180D\\\\u18A9\\\\u1920-\\\\u1922\\\\u1927\\\\u1928\\\\u1932\\\\u1939-\\\\u193B\\\\u1A17\\\\u1A18\\\\u1A56\\\\u1A58-\\\\u1A5E\\\\u1A60\\\\u1A62\\\\u1A65-\\\\u1A6C\\\\u1A73-\\\\u1A7C\\\\u1A7F\\\\u1B00-\\\\u1B03\\\\u1B34\\\\u1B36-\\\\u1B3A\\\\u1B3C\\\\u1B42\\\\u1B6B-\\\\u1B73\\\\u1B80\\\\u1B81\\\\u1BA2-\\\\u1BA5\\\\u1BA8\\\\u1BA9\\\\u1C2C-\\\\u1C33\\\\u1C36\\\\u1C37\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CE0\\\\u1CE2-\\\\u1CE8\\\\u1CED\\\\u1DC0-\\\\u1DE6\\\\u1DFD-\\\\u1DFF\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2CEF-\\\\u2CF1\\\\u2DE0-\\\\u2DFF\\\\u302A-\\\\u302F\\\\u3099\\\\u309A\\\\uA66F\\\\uA67C\\\\uA67D\\\\uA6F0\\\\uA6F1\\\\uA802\\\\uA806\\\\uA80B\\\\uA825\\\\uA826\\\\uA8C4\\\\uA8E0-\\\\uA8F1\\\\uA926-\\\\uA92D\\\\uA947-\\\\uA951\\\\uA980-\\\\uA982\\\\uA9B3\\\\uA9B6-\\\\uA9B9\\\\uA9BC\\\\uAA29-\\\\uAA2E\\\\uAA31\\\\uAA32\\\\uAA35\\\\uAA36\\\\uAA43\\\\uAA4C\\\\uAAB0\\\\uAAB2-\\\\uAAB4\\\\uAAB7\\\\uAAB8\\\\uAABE\\\\uAABF\\\\uAAC1\\\\uABE5\\\\uABE8\\\\uABED\\\\uFB1E\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE26]"),\n    space_combining_mark: new RegExp("[\\\\u0903\\\\u093E-\\\\u0940\\\\u0949-\\\\u094C\\\\u094E\\\\u0982\\\\u0983\\\\u09BE-\\\\u09C0\\\\u09C7\\\\u09C8\\\\u09CB\\\\u09CC\\\\u09D7\\\\u0A03\\\\u0A3E-\\\\u0A40\\\\u0A83\\\\u0ABE-\\\\u0AC0\\\\u0AC9\\\\u0ACB\\\\u0ACC\\\\u0B02\\\\u0B03\\\\u0B3E\\\\u0B40\\\\u0B47\\\\u0B48\\\\u0B4B\\\\u0B4C\\\\u0B57\\\\u0BBE\\\\u0BBF\\\\u0BC1\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCC\\\\u0BD7\\\\u0C01-\\\\u0C03\\\\u0C41-\\\\u0C44\\\\u0C82\\\\u0C83\\\\u0CBE\\\\u0CC0-\\\\u0CC4\\\\u0CC7\\\\u0CC8\\\\u0CCA\\\\u0CCB\\\\u0CD5\\\\u0CD6\\\\u0D02\\\\u0D03\\\\u0D3E-\\\\u0D40\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4C\\\\u0D57\\\\u0D82\\\\u0D83\\\\u0DCF-\\\\u0DD1\\\\u0DD8-\\\\u0DDF\\\\u0DF2\\\\u0DF3\\\\u0F3E\\\\u0F3F\\\\u0F7F\\\\u102B\\\\u102C\\\\u1031\\\\u1038\\\\u103B\\\\u103C\\\\u1056\\\\u1057\\\\u1062-\\\\u1064\\\\u1067-\\\\u106D\\\\u1083\\\\u1084\\\\u1087-\\\\u108C\\\\u108F\\\\u109A-\\\\u109C\\\\u17B6\\\\u17BE-\\\\u17C5\\\\u17C7\\\\u17C8\\\\u1923-\\\\u1926\\\\u1929-\\\\u192B\\\\u1930\\\\u1931\\\\u1933-\\\\u1938\\\\u19B0-\\\\u19C0\\\\u19C8\\\\u19C9\\\\u1A19-\\\\u1A1B\\\\u1A55\\\\u1A57\\\\u1A61\\\\u1A63\\\\u1A64\\\\u1A6D-\\\\u1A72\\\\u1B04\\\\u1B35\\\\u1B3B\\\\u1B3D-\\\\u1B41\\\\u1B43\\\\u1B44\\\\u1B82\\\\u1BA1\\\\u1BA6\\\\u1BA7\\\\u1BAA\\\\u1C24-\\\\u1C2B\\\\u1C34\\\\u1C35\\\\u1CE1\\\\u1CF2\\\\uA823\\\\uA824\\\\uA827\\\\uA880\\\\uA881\\\\uA8B4-\\\\uA8C3\\\\uA952\\\\uA953\\\\uA983\\\\uA9B4\\\\uA9B5\\\\uA9BA\\\\uA9BB\\\\uA9BD-\\\\uA9C0\\\\uAA2F\\\\uAA30\\\\uAA33\\\\uAA34\\\\uAA4D\\\\uAA7B\\\\uABE3\\\\uABE4\\\\uABE6\\\\uABE7\\\\uABE9\\\\uABEA\\\\uABEC]"),\n    connector_punctuation: new RegExp("[\\\\u005F\\\\u203F\\\\u2040\\\\u2054\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFF3F]")\n};\n\nfunction is_letter(code) {\n    return (code >= 97 && code <= 122)\n        || (code >= 65 && code <= 90)\n        || (code >= 0xaa && UNICODE.letter.test(String.fromCharCode(code)));\n};\n\nfunction is_digit(code) {\n    return code >= 48 && code <= 57;\n};\n\nfunction is_alphanumeric_char(code) {\n    return is_digit(code) || is_letter(code);\n};\n\nfunction is_unicode_digit(code) {\n    return UNICODE.digit.test(String.fromCharCode(code));\n}\n\nfunction is_unicode_combining_mark(ch) {\n    return UNICODE.non_spacing_mark.test(ch) || UNICODE.space_combining_mark.test(ch);\n};\n\nfunction is_unicode_connector_punctuation(ch) {\n    return UNICODE.connector_punctuation.test(ch);\n};\n\nfunction is_identifier(name) {\n    return !RESERVED_WORDS(name) && /^[a-z_$][a-z0-9_$]*$/i.test(name);\n};\n\nfunction is_identifier_start(code) {\n    return code == 36 || code == 95 || is_letter(code);\n};\n\nfunction is_identifier_char(ch) {\n    var code = ch.charCodeAt(0);\n    return is_identifier_start(code)\n        || is_digit(code)\n        || code == 8204 // \\u200c: zero-width non-joiner <ZWNJ>\n        || code == 8205 // \\u200d: zero-width joiner <ZWJ> (in my ECMA-262 PDF, this is also 200c)\n        || is_unicode_combining_mark(ch)\n        || is_unicode_connector_punctuation(ch)\n        || is_unicode_digit(code)\n    ;\n};\n\nfunction is_identifier_string(str){\n    return /^[a-z_$][a-z0-9_$]*$/i.test(str);\n};\n\nfunction parse_js_number(num) {\n    if (RE_HEX_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 16);\n    } else if (RE_OCT_NUMBER.test(num)) {\n        return parseInt(num.substr(1), 8);\n    } else if (RE_ES6_OCT_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 8);\n    } else if (RE_BIN_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 2);\n    } else if (RE_DEC_NUMBER.test(num)) {\n        return parseFloat(num);\n    }\n};\n\nfunction JS_Parse_Error(message, filename, line, col, pos) {\n    this.message = message;\n    this.filename = filename;\n    this.line = line;\n    this.col = col;\n    this.pos = pos;\n    this.stack = new Error().stack;\n};\n\nJS_Parse_Error.prototype.toString = function() {\n    return this.message + " (line: " + this.line + ", col: " + this.col + ", pos: " + this.pos + ")" + "\\n\\n" + this.stack;\n};\n\nfunction js_error(message, filename, line, col, pos) {\n    throw new JS_Parse_Error(message, filename, line, col, pos);\n};\n\nfunction is_token(token, type, val) {\n    return token.type == type && (val == null || token.value == val);\n};\n\nvar EX_EOF = {};\n\nfunction tokenizer($TEXT, filename, html5_comments, shebang) {\n\n    var S = {\n        text            : $TEXT,\n        filename        : filename,\n        pos             : 0,\n        tokpos          : 0,\n        line            : 1,\n        tokline         : 0,\n        col             : 0,\n        tokcol          : 0,\n        newline_before  : false,\n        regex_allowed   : false,\n        comments_before : []\n    };\n\n    function peek() { return S.text.charAt(S.pos); };\n\n    function next(signal_eof, in_string) {\n        var ch = S.text.charAt(S.pos++);\n        if (signal_eof && !ch)\n            throw EX_EOF;\n        if ("\\r\\n\\u2028\\u2029".indexOf(ch) >= 0) {\n            S.newline_before = S.newline_before || !in_string;\n            ++S.line;\n            S.col = 0;\n            if (!in_string && ch == "\\r" && peek() == "\\n") {\n                // treat a \\r\\n sequence as a single \\n\n                ++S.pos;\n                ch = "\\n";\n            }\n        } else {\n            ++S.col;\n        }\n        return ch;\n    };\n\n    function forward(i) {\n        while (i-- > 0) next();\n    };\n\n    function looking_at(str) {\n        return S.text.substr(S.pos, str.length) == str;\n    };\n\n    function find(what, signal_eof) {\n        var pos = S.text.indexOf(what, S.pos);\n        if (signal_eof && pos == -1) throw EX_EOF;\n        return pos;\n    };\n\n    function start_token() {\n        S.tokline = S.line;\n        S.tokcol = S.col;\n        S.tokpos = S.pos;\n    };\n\n    var prev_was_dot = false;\n    function token(type, value, is_comment) {\n        S.regex_allowed = ((type == "operator" && !UNARY_POSTFIX(value)) ||\n                           (type == "keyword" && KEYWORDS_BEFORE_EXPRESSION(value)) ||\n                           (type == "punc" && PUNC_BEFORE_EXPRESSION(value)));\n        prev_was_dot = (type == "punc" && value == ".");\n        var ret = {\n            type    : type,\n            value   : value,\n            line    : S.tokline,\n            col     : S.tokcol,\n            pos     : S.tokpos,\n            endline : S.line,\n            endcol  : S.col,\n            endpos  : S.pos,\n            nlb     : S.newline_before,\n            file    : filename\n        };\n        if (!is_comment) {\n            ret.comments_before = S.comments_before;\n            S.comments_before = [];\n            // make note of any newlines in the comments that came before\n            for (var i = 0, len = ret.comments_before.length; i < len; i++) {\n                ret.nlb = ret.nlb || ret.comments_before[i].nlb;\n            }\n        }\n        S.newline_before = false;\n        return new AST_Token(ret);\n    };\n\n    function skip_whitespace() {\n        var ch;\n        while (WHITESPACE_CHARS(ch = peek()) || ch == "\\u2028" || ch == "\\u2029")\n            next();\n    };\n\n    function read_while(pred) {\n        var ret = "", ch, i = 0;\n        while ((ch = peek()) && pred(ch, i++))\n            ret += next();\n        return ret;\n    };\n\n    function parse_error(err) {\n        js_error(err, filename, S.tokline, S.tokcol, S.tokpos);\n    };\n\n    function read_num(prefix) {\n        var has_e = false, after_e = false, has_x = false, has_dot = prefix == ".";\n        var num = read_while(function(ch, i){\n            var code = ch.charCodeAt(0);\n            switch (code) {\n              case 120: case 88: // xX\n                return has_x ? false : (has_x = true);\n              case 101: case 69: // eE\n                return has_x ? true : has_e ? false : (has_e = after_e = true);\n              case 45: // -\n                return after_e || (i == 0 && !prefix);\n              case 43: // +\n                return after_e;\n              case (after_e = false, 46): // .\n                return (!has_dot && !has_x && !has_e) ? (has_dot = true) : false;\n            }\n            return is_alphanumeric_char(code);\n        });\n        if (prefix) num = prefix + num;\n        var valid = parse_js_number(num);\n        if (!isNaN(valid)) {\n            var tok = token("num", valid);\n            if (num.indexOf(\'.\') >= 0) {\n                tok.literal = num;\n            }\n            return tok;\n        } else {\n            parse_error("Invalid syntax: " + num);\n        }\n    };\n\n    function read_escaped_char(in_string) {\n        var ch = next(true, in_string);\n        switch (ch.charCodeAt(0)) {\n          case 110 : return "\\n";\n          case 114 : return "\\r";\n          case 116 : return "\\t";\n          case 98  : return "\\b";\n          case 118 : return "\\u000b"; // \\v\n          case 102 : return "\\f";\n          case 48  : return "\\0";\n          case 120 : return String.fromCharCode(hex_bytes(2)); // \\x\n          case 117 : return String.fromCharCode(hex_bytes(4)); // \\u\n          case 10  : return ""; // newline\n          case 13  :            // \\r\n            if (peek() == "\\n") { // DOS newline\n                next(true, in_string);\n                return "";\n            }\n        }\n        return ch;\n    };\n\n    function hex_bytes(n) {\n        var num = 0;\n        for (; n > 0; --n) {\n            var digit = parseInt(next(true), 16);\n            if (isNaN(digit))\n                parse_error("Invalid hex-character pattern in string");\n            num = (num << 4) | digit;\n        }\n        return num;\n    };\n\n    var read_string = with_eof_error("Unterminated string constant", function(quote_char){\n        var quote = next(), ret = "";\n        for (;;) {\n            var ch = next(true, true);\n            if (ch == "\\\\") {\n                // read OctalEscapeSequence (XXX: deprecated if "strict mode")\n                // https://github.com/mishoo/UglifyJS/issues/178\n                var octal_len = 0, first = null;\n                ch = read_while(function(ch){\n                    if (ch >= "0" && ch <= "7") {\n                        if (!first) {\n                            first = ch;\n                            return ++octal_len;\n                        }\n                        else if (first <= "3" && octal_len <= 2) return ++octal_len;\n                        else if (first >= "4" && octal_len <= 1) return ++octal_len;\n                    }\n                    return false;\n                });\n                if (octal_len > 0) ch = String.fromCharCode(parseInt(ch, 8));\n                else ch = read_escaped_char(true);\n            }\n            else if (ch == quote) break;\n            ret += ch;\n        }\n        var tok = token("string", ret);\n        tok.quote = quote_char;\n        return tok;\n    });\n\n    function skip_line_comment(type) {\n        var regex_allowed = S.regex_allowed;\n        var i = find("\\n"), ret;\n        if (i == -1) {\n            ret = S.text.substr(S.pos);\n            S.pos = S.text.length;\n        } else {\n            ret = S.text.substring(S.pos, i);\n            S.pos = i;\n        }\n        S.col = S.tokcol + (S.pos - S.tokpos);\n        S.comments_before.push(token(type, ret, true));\n        S.regex_allowed = regex_allowed;\n        return next_token();\n    };\n\n    var skip_multiline_comment = with_eof_error("Unterminated multiline comment", function(){\n        var regex_allowed = S.regex_allowed;\n        var i = find("*/", true);\n        var text = S.text.substring(S.pos, i);\n        var a = text.split("\\n"), n = a.length;\n        // update stream position\n        S.pos = i + 2;\n        S.line += n - 1;\n        if (n > 1) S.col = a[n - 1].length;\n        else S.col += a[n - 1].length;\n        S.col += 2;\n        var nlb = S.newline_before = S.newline_before || text.indexOf("\\n") >= 0;\n        S.comments_before.push(token("comment2", text, true));\n        S.regex_allowed = regex_allowed;\n        S.newline_before = nlb;\n        return next_token();\n    });\n\n    function read_name() {\n        var backslash = false, name = "", ch, escaped = false, hex;\n        while ((ch = peek()) != null) {\n            if (!backslash) {\n                if (ch == "\\\\") escaped = backslash = true, next();\n                else if (is_identifier_char(ch)) name += next();\n                else break;\n            }\n            else {\n                if (ch != "u") parse_error("Expecting UnicodeEscapeSequence -- uXXXX");\n                ch = read_escaped_char();\n                if (!is_identifier_char(ch)) parse_error("Unicode char: " + ch.charCodeAt(0) + " is not valid in identifier");\n                name += ch;\n                backslash = false;\n            }\n        }\n        if (KEYWORDS(name) && escaped) {\n            hex = name.charCodeAt(0).toString(16).toUpperCase();\n            name = "\\\\u" + "0000".substr(hex.length) + hex + name.slice(1);\n        }\n        return name;\n    };\n\n    var read_regexp = with_eof_error("Unterminated regular expression", function(regexp){\n        var prev_backslash = false, ch, in_class = false;\n        while ((ch = next(true))) if (prev_backslash) {\n            regexp += "\\\\" + ch;\n            prev_backslash = false;\n        } else if (ch == "[") {\n            in_class = true;\n            regexp += ch;\n        } else if (ch == "]" && in_class) {\n            in_class = false;\n            regexp += ch;\n        } else if (ch == "/" && !in_class) {\n            break;\n        } else if (ch == "\\\\") {\n            prev_backslash = true;\n        } else {\n            regexp += ch;\n        }\n        var mods = read_name();\n        try {\n          return token("regexp", new RegExp(regexp, mods));\n        } catch(e) {\n          parse_error(e.message);\n        }\n    });\n\n    function read_operator(prefix) {\n        function grow(op) {\n            if (!peek()) return op;\n            var bigger = op + peek();\n            if (OPERATORS(bigger)) {\n                next();\n                return grow(bigger);\n            } else {\n                return op;\n            }\n        };\n        return token("operator", grow(prefix || next()));\n    };\n\n    function handle_slash() {\n        next();\n        switch (peek()) {\n          case "/":\n            next();\n            return skip_line_comment("comment1");\n          case "*":\n            next();\n            return skip_multiline_comment();\n        }\n        return S.regex_allowed ? read_regexp("") : read_operator("/");\n    };\n\n    function handle_eq_sign() {\n        next();\n        if (peek() === ">") {\n            next();\n            return token("arrow", "=>");\n        } else {\n            return read_operator("=");\n        }\n    };\n\n    function handle_dot() {\n        next();\n        if (is_digit(peek().charCodeAt(0))) {\n            return read_num(".");\n        }\n        if (peek() === ".") {\n            next();  // Consume second dot\n            next();  // Consume third dot\n            return token("expand", "...");\n        }\n\n        return token("punc", ".");\n    };\n\n    function read_word() {\n        var word = read_name();\n        if (prev_was_dot) return token("name", word);\n        return KEYWORDS_ATOM(word) ? token("atom", word)\n            : !KEYWORDS(word) ? token("name", word)\n            : OPERATORS(word) ? token("operator", word)\n            : token("keyword", word);\n    };\n\n    function with_eof_error(eof_error, cont) {\n        return function(x) {\n            try {\n                return cont(x);\n            } catch(ex) {\n                if (ex === EX_EOF) parse_error(eof_error);\n                else throw ex;\n            }\n        };\n    };\n\n    function next_token(force_regexp) {\n        if (force_regexp != null)\n            return read_regexp(force_regexp);\n        skip_whitespace();\n        start_token();\n        if (html5_comments) {\n            if (looking_at("<!--")) {\n                forward(4);\n                return skip_line_comment("comment3");\n            }\n            if (looking_at("-->") && S.newline_before) {\n                forward(3);\n                return skip_line_comment("comment4");\n            }\n        }\n        var ch = peek();\n        if (!ch) return token("eof");\n        var code = ch.charCodeAt(0);\n        switch (code) {\n          case 34: case 39: return read_string(ch);\n          case 46: return handle_dot();\n          case 47: return handle_slash();\n          case 61: return handle_eq_sign();\n        }\n        if (is_digit(code)) return read_num();\n        if (PUNC_CHARS(ch)) return token("punc", next());\n        if (OPERATOR_CHARS(ch)) return read_operator();\n        if (code == 92 || is_identifier_start(code)) return read_word();\n\n        if (shebang) {\n            if (S.pos == 0 && looking_at("#!")) {\n                forward(2);\n                return skip_line_comment("comment5");\n            }\n        }\n        parse_error("Unexpected character \'" + ch + "\'");\n    };\n\n    next_token.next = next;\n    next_token.peek = peek;\n\n    next_token.context = function(nc) {\n        if (nc) S = nc;\n        return S;\n    };\n\n    return next_token;\n\n};\n\n/* -----[ Parser (constants) ]----- */\n\nvar UNARY_PREFIX = makePredicate([\n    "typeof",\n    "void",\n    "delete",\n    "--",\n    "++",\n    "!",\n    "~",\n    "-",\n    "+"\n]);\n\nvar UNARY_POSTFIX = makePredicate([ "--", "++" ]);\n\nvar ASSIGNMENT = makePredicate([ "=", "+=", "-=", "/=", "*=", "%=", ">>=", "<<=", ">>>=", "|=", "^=", "&=" ]);\n\nvar PRECEDENCE = (function(a, ret){\n    for (var i = 0; i < a.length; ++i) {\n        var b = a[i];\n        for (var j = 0; j < b.length; ++j) {\n            ret[b[j]] = i + 1;\n        }\n    }\n    return ret;\n})(\n    [\n        ["||"],\n        ["&&"],\n        ["|"],\n        ["^"],\n        ["&"],\n        ["==", "===", "!=", "!=="],\n        ["<", ">", "<=", ">=", "in", "instanceof"],\n        [">>", "<<", ">>>"],\n        ["+", "-"],\n        ["*", "/", "%"]\n    ],\n    {}\n);\n\nvar STATEMENTS_WITH_LABELS = array_to_hash([ "for", "do", "while", "switch" ]);\n\nvar ATOMIC_START_TOKEN = array_to_hash([ "atom", "num", "string", "regexp", "name" ]);\n\n/* -----[ Parser ]----- */\n\nfunction parse($TEXT, options) {\n\n    options = defaults(options, {\n        strict         : false,\n        filename       : null,\n        toplevel       : null,\n        expression     : false,\n        html5_comments : true,\n        bare_returns   : false,\n        shebang        : true,\n    });\n\n    var S = {\n        input         : (typeof $TEXT == "string"\n                         ? tokenizer($TEXT, options.filename,\n                                     options.html5_comments, options.shebang)\n                         : $TEXT),\n        token         : null,\n        prev          : null,\n        peeked        : null,\n        in_function   : 0,\n        in_directives : true,\n        in_loop       : 0,\n        labels        : []\n    };\n\n    S.token = next();\n\n    function is(type, value) {\n        return is_token(S.token, type, value);\n    };\n\n    function peek() { return S.peeked || (S.peeked = S.input()); };\n\n    function next() {\n        S.prev = S.token;\n        if (S.peeked) {\n            S.token = S.peeked;\n            S.peeked = null;\n        } else {\n            S.token = S.input();\n        }\n        S.in_directives = S.in_directives && (\n            S.token.type == "string" || is("punc", ";")\n        );\n        return S.token;\n    };\n\n    function prev() {\n        return S.prev;\n    };\n\n    function croak(msg, line, col, pos) {\n        var ctx = S.input.context();\n        js_error(msg,\n                 ctx.filename,\n                 line != null ? line : ctx.tokline,\n                 col != null ? col : ctx.tokcol,\n                 pos != null ? pos : ctx.tokpos);\n    };\n\n    function token_error(token, msg) {\n        croak(msg, token.line, token.col);\n    };\n\n    function unexpected(token) {\n        if (token == null)\n            token = S.token;\n        token_error(token, "Unexpected token: " + token.type + " (" + token.value + ")");\n    };\n\n    function expect_token(type, val) {\n        if (is(type, val)) {\n            return next();\n        }\n        token_error(S.token, "Unexpected token " + S.token.type + " «" + S.token.value + "»" + ", expected " + type + " «" + val + "»");\n    };\n\n    function expect(punc) { return expect_token("punc", punc); };\n\n    function can_insert_semicolon() {\n        return !options.strict && (\n            S.token.nlb || is("eof") || is("punc", "}")\n        );\n    };\n\n    function semicolon() {\n        if (is("punc", ";")) next();\n        else if (!can_insert_semicolon()) unexpected();\n    };\n\n    function parenthesised() {\n        expect("(");\n        var exp = expression(true);\n        expect(")");\n        return exp;\n    };\n\n    function embed_tokens(parser) {\n        return function() {\n            var start = S.token;\n            var expr = parser.apply(null, arguments);\n            var end = prev();\n            expr.start = start;\n            expr.end = end;\n            return expr;\n        };\n    };\n\n    function handle_regexp() {\n        if (is("operator", "/") || is("operator", "/=")) {\n            S.peeked = null;\n            S.token = S.input(S.token.value.substr(1)); // force regexp\n        }\n    };\n\n    var statement = embed_tokens(function() {\n        var tmp;\n        handle_regexp();\n        switch (S.token.type) {\n          case "string":\n            var dir = S.in_directives, stat = simple_statement();\n            // XXXv2: decide how to fix directives\n            if (dir && stat.body instanceof AST_String && !is("punc", ",")) {\n                return new AST_Directive({\n                    start : stat.body.start,\n                    end   : stat.body.end,\n                    quote : stat.body.quote,\n                    value : stat.body.value,\n                });\n            }\n            return stat;\n          case "num":\n          case "regexp":\n          case "operator":\n          case "atom":\n            return simple_statement();\n\n          case "name":\n            return is_token(peek(), "punc", ":")\n                ? labeled_statement()\n                : simple_statement();\n\n          case "punc":\n            switch (S.token.value) {\n              case "{":\n                return new AST_BlockStatement({\n                    start : S.token,\n                    body  : block_(),\n                    end   : prev()\n                });\n              case "[":\n              case "(":\n              case "`":\n                return simple_statement();\n              case ";":\n                next();\n                return new AST_EmptyStatement();\n              default:\n                unexpected();\n            }\n\n          case "keyword":\n            switch (tmp = S.token.value, next(), tmp) {\n              case "break":\n                return break_cont(AST_Break);\n\n              case "continue":\n                return break_cont(AST_Continue);\n\n              case "debugger":\n                semicolon();\n                return new AST_Debugger();\n\n              case "do":\n                return new AST_Do({\n                    body      : in_loop(statement),\n                    condition : (expect_token("keyword", "while"), tmp = parenthesised(), semicolon(), tmp)\n                });\n\n              case "while":\n                return new AST_While({\n                    condition : parenthesised(),\n                    body      : in_loop(statement)\n                });\n\n              case "for":\n                return for_();\n\n              case "class":\n                return class_(AST_DefClass);\n\n              case "function":\n                return function_(AST_Defun);\n\n              case "if":\n                return if_();\n\n              case "return":\n                if (S.in_function == 0 && !options.bare_returns)\n                    croak("\'return\' outside of function");\n                return new AST_Return({\n                    value: ( is("punc", ";")\n                             ? (next(), null)\n                             : can_insert_semicolon()\n                             ? null\n                             : (tmp = expression(true), semicolon(), tmp) )\n                });\n\n              case "switch":\n                return new AST_Switch({\n                    expression : parenthesised(),\n                    body       : in_loop(switch_body_)\n                });\n\n              case "throw":\n                if (S.token.nlb)\n                    croak("Illegal newline after \'throw\'");\n                return new AST_Throw({\n                    value: (tmp = expression(true), semicolon(), tmp)\n                });\n\n              case "try":\n                return try_();\n\n              case "var":\n                return tmp = var_(), semicolon(), tmp;\n\n              case "let":\n                return tmp = let_(), semicolon(), tmp;\n\n              case "const":\n                return tmp = const_(), semicolon(), tmp;\n\n              case "with":\n                return new AST_With({\n                    expression : parenthesised(),\n                    body       : statement()\n                });\n\n              default:\n                unexpected();\n            }\n        }\n    });\n\n    function labeled_statement() {\n        var label = as_symbol(AST_Label);\n        if (find_if(function(l){ return l.name == label.name }, S.labels)) {\n            // ECMA-262, 12.12: An ECMAScript program is considered\n            // syntactically incorrect if it contains a\n            // LabelledStatement that is enclosed by a\n            // LabelledStatement with the same Identifier as label.\n            croak("Label " + label.name + " defined twice");\n        }\n        expect(":");\n        S.labels.push(label);\n        var stat = statement();\n        S.labels.pop();\n        if (!(stat instanceof AST_IterationStatement)) {\n            // check for `continue` that refers to this label.\n            // those should be reported as syntax errors.\n            // https://github.com/mishoo/UglifyJS2/issues/287\n            label.references.forEach(function(ref){\n                if (ref instanceof AST_Continue) {\n                    ref = ref.label.start;\n                    croak("Continue label `" + label.name + "` refers to non-IterationStatement.",\n                          ref.line, ref.col, ref.pos);\n                }\n            });\n        }\n        return new AST_LabeledStatement({ body: stat, label: label });\n    };\n\n    function simple_statement(tmp) {\n        return new AST_SimpleStatement({ body: (tmp = expression(true), semicolon(), tmp) });\n    };\n\n    function break_cont(type) {\n        var label = null, ldef;\n        if (!can_insert_semicolon()) {\n            label = as_symbol(AST_LabelRef, true);\n        }\n        if (label != null) {\n            ldef = find_if(function(l){ return l.name == label.name }, S.labels);\n            if (!ldef)\n                croak("Undefined label " + label.name);\n            label.thedef = ldef;\n        }\n        else if (S.in_loop == 0)\n            croak(type.TYPE + " not inside a loop or switch");\n        semicolon();\n        var stat = new type({ label: label });\n        if (ldef) ldef.references.push(stat);\n        return stat;\n    };\n\n    function for_() {\n        expect("(");\n        var init = null;\n        if (!is("punc", ";")) {\n            init =\n                is("keyword", "var") ? (next(), var_(true)) :\n                is("keyword", "let") ? (next(), let_(true)) :\n                                       expression(true, true);\n            var is_in = is("operator", "in");\n            var is_of = is("name", "of");\n            if (is_in || is_of) {\n                if ((init instanceof AST_Var || init instanceof AST_Let) &&\n                        init.definitions.length > 1)\n                    croak("Only one variable declaration allowed in for..in loop");\n                next();\n                if (is_in) {\n                    return for_in(init);\n                } else {\n                    return for_of(init);\n                }\n            }\n        }\n        return regular_for(init);\n    };\n\n    function regular_for(init) {\n        expect(";");\n        var test = is("punc", ";") ? null : expression(true);\n        expect(";");\n        var step = is("punc", ")") ? null : expression(true);\n        expect(")");\n        return new AST_For({\n            init      : init,\n            condition : test,\n            step      : step,\n            body      : in_loop(statement)\n        });\n    };\n\n    function for_of(init) {\n        var lhs = init instanceof AST_Var ? init.definitions[0].name : null;\n        var obj = expression(true);\n        expect(")");\n        return new AST_ForOf({\n            init   : init,\n            name   : lhs,\n            object : obj,\n            body   : in_loop(statement)\n        });\n    };\n\n    function for_in(init) {\n        var lhs = init instanceof AST_Var ? init.definitions[0].name : null;\n        var obj = expression(true);\n        expect(")");\n        return new AST_ForIn({\n            init   : init,\n            name   : lhs,\n            object : obj,\n            body   : in_loop(statement)\n        });\n    };\n\n    var arrow_function = function(args) {\n        expect_token("arrow", "=>");\n\n        var argnames = args.as_params(croak);\n\n        var body = is("punc", "{") ?\n            _function_body(true) :\n            _function_body(false);\n\n        return new AST_Arrow({\n            start    : args.start,\n            end      : body.end,\n            argnames : argnames,\n            body     : body\n        });\n    };\n\n    var function_ = function(ctor) {\n        var start = S.token\n\n        var in_statement = ctor === AST_Defun;\n        var name = is("name") ? as_symbol(in_statement ? AST_SymbolDefun : AST_SymbolLambda) : null;\n        if (in_statement && !name)\n            unexpected();\n\n        var args = params_or_seq_().as_params(croak);\n        var body = _function_body(true);\n        return new ctor({\n            start : args.start,\n            end   : body.end,\n            name  : name,\n            argnames: args,\n            body  : body\n        });\n    };\n\n    function params_or_seq_() {\n        var start = S.token\n        expect("(");\n        var first = true;\n        var a = [];\n        while (!is("punc", ")")) {\n            if (first) first = false; else expect(",");\n            if (is("expand", "...")) {\n                next();\n                a.push(new AST_Expansion({\n                    start: prev(),\n                    symbol: as_symbol(AST_SymbolFunarg),\n                    end: S.token,\n                }));\n            } else {\n                a.push(expression(false));\n            }\n        }\n        var end = S.token\n        next();\n        return new AST_ArrowParametersOrSeq({\n            start: start,\n            end: end,\n            expressions: a\n        });\n    }\n\n    function _function_body(block) {\n        var loop = S.in_loop;\n        var labels = S.labels;\n        ++S.in_function;\n        if (block)\n            S.in_directives = true;\n        S.in_loop = 0;\n        S.labels = [];\n        if (block)\n            var a = block_();\n        else\n            var a = expression(false);\n        --S.in_function;\n        S.in_loop = loop;\n        S.labels = labels;\n        return a;\n    }\n\n    function if_() {\n        var cond = parenthesised(), body = statement(), belse = null;\n        if (is("keyword", "else")) {\n            next();\n            belse = statement();\n        }\n        return new AST_If({\n            condition   : cond,\n            body        : body,\n            alternative : belse\n        });\n    };\n\n    function block_() {\n        expect("{");\n        var a = [];\n        while (!is("punc", "}")) {\n            if (is("eof")) unexpected();\n            a.push(statement());\n        }\n        next();\n        return a;\n    };\n\n    function switch_body_() {\n        expect("{");\n        var a = [], cur = null, branch = null, tmp;\n        while (!is("punc", "}")) {\n            if (is("eof")) unexpected();\n            if (is("keyword", "case")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Case({\n                    start      : (tmp = S.token, next(), tmp),\n                    expression : expression(true),\n                    body       : cur\n                });\n                a.push(branch);\n                expect(":");\n            }\n            else if (is("keyword", "default")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Default({\n                    start : (tmp = S.token, next(), expect(":"), tmp),\n                    body  : cur\n                });\n                a.push(branch);\n            }\n            else {\n                if (!cur) unexpected();\n                cur.push(statement());\n            }\n        }\n        if (branch) branch.end = prev();\n        next();\n        return a;\n    };\n\n    function try_() {\n        var body = block_(), bcatch = null, bfinally = null;\n        if (is("keyword", "catch")) {\n            var start = S.token;\n            next();\n            expect("(");\n            var name = as_symbol(AST_SymbolCatch);\n            expect(")");\n            bcatch = new AST_Catch({\n                start   : start,\n                argname : name,\n                body    : block_(),\n                end     : prev()\n            });\n        }\n        if (is("keyword", "finally")) {\n            var start = S.token;\n            next();\n            bfinally = new AST_Finally({\n                start : start,\n                body  : block_(),\n                end   : prev()\n            });\n        }\n        if (!bcatch && !bfinally)\n            croak("Missing catch/finally blocks");\n        return new AST_Try({\n            body     : body,\n            bcatch   : bcatch,\n            bfinally : bfinally\n        });\n    };\n\n    function vardefs(no_in, in_const) {\n        var a = [];\n        var def;\n        for (;;) {\n            var sym_type = in_const ? AST_SymbolConst : AST_SymbolVar;\n            if (is("punc", "{") || is("punc", "[")) {\n                def = new AST_VarDef({\n                    start: S.token,\n                    name: destructuring_(sym_type),\n                    value: is("operator", "=") ? (expect_token("operator", "="), expression(false, no_in)) : null,\n                    end: prev()\n                });\n            } else {\n                def = new AST_VarDef({\n                    start : S.token,\n                    name  : as_symbol(sym_type),\n                    value : is("operator", "=") ? (next(), expression(false, no_in)) : null,\n                    end   : prev()\n                })\n            }\n            a.push(def);\n            if (!is("punc", ","))\n                break;\n            next();\n        }\n        return a;\n    };\n\n    var destructuring_ = embed_tokens(function (sym_type) {\n        var is_array = is("punc", "[");\n        var closing = is_array ? \']\' : \'}\';\n        var sym_type = sym_type || AST_SymbolRef;\n\n        next();\n\n        var first = true, children = [];\n        while (!is("punc", closing)) {\n            if (first) first = false; else expect(",");\n            if (is("punc", closing)) break;\n            if (is("punc", ",")) {\n                children.push(new AST_Hole({ start: S.token, end: S.token }));\n            } else if (is("punc", "[") || is("punc", "{")) {\n                children.push(destructuring_(sym_type));\n            } else if (is("expand", "...")) {\n                next();\n                var symbol = _make_symbol(sym_type);\n                children.push(new AST_Expansion({\n                    start: prev(),\n                    symbol: symbol,\n                    end: S.token\n                }));\n                next();\n            } else if (is("name")) {\n                children.push(_make_symbol(sym_type));\n                next();\n            } else {\n                children.push(expression());\n            }\n        }\n        next()\n        return new AST_Destructuring({\n            names: children,\n            is_array: is_array\n        })\n    });\n\n    var var_ = function(no_in) {\n        return new AST_Var({\n            start       : prev(),\n            definitions : vardefs(no_in, false),\n            end         : prev()\n        });\n    };\n\n    var let_ = function(no_in) {\n        return new AST_Let({\n            start       : prev(),\n            definitions : vardefs(no_in, false),\n            end         : prev()\n        });\n    };\n\n    var const_ = function() {\n        return new AST_Const({\n            start       : prev(),\n            definitions : vardefs(false, true),\n            end         : prev()\n        });\n    };\n\n    var new_ = function(allow_calls) {\n        var start = S.token;\n        expect_token("operator", "new");\n        if (is("punc", ".")) {\n            next();\n            expect_token("name");\n            return subscripts(new AST_NewTarget({\n                start : start,\n                end   : prev()\n            }), allow_calls);\n        }\n        var newexp = expr_atom(false), args;\n        if (is("punc", "(")) {\n            next();\n            args = expr_list(")");\n        } else {\n            args = [];\n        }\n        return subscripts(new AST_New({\n            start      : start,\n            expression : newexp,\n            args       : args,\n            end        : prev()\n        }), allow_calls);\n    };\n\n    function as_atom_node() {\n        var tok = S.token, ret;\n        switch (tok.type) {\n          case "name":\n          case "keyword":\n            ret = _make_symbol(AST_SymbolRef);\n            break;\n          case "num":\n            ret = new AST_Number({ start: tok, end: tok, value: tok.value, literal: tok.literal });\n            break;\n          case "string":\n            ret = new AST_String({\n                start : tok,\n                end   : tok,\n                value : tok.value,\n                quote : tok.quote\n            });\n            break;\n          case "regexp":\n            ret = new AST_RegExp({ start: tok, end: tok, value: tok.value });\n            break;\n          case "atom":\n            switch (tok.value) {\n              case "false":\n                ret = new AST_False({ start: tok, end: tok });\n                break;\n              case "true":\n                ret = new AST_True({ start: tok, end: tok });\n                break;\n              case "null":\n                ret = new AST_Null({ start: tok, end: tok });\n                break;\n            }\n            break;\n        }\n        next();\n        return ret;\n    };\n\n    var expr_atom = function(allow_calls) {\n        if (is("operator", "new")) {\n            return new_(allow_calls);\n        }\n        var start = S.token;\n        if (is("punc")) {\n            switch (start.value) {\n              case "(":\n                var ex = params_or_seq_();\n                ex.start = start;\n                ex.end = S.token;\n                if (is("arrow", "=>")) {\n                    return arrow_function(ex);\n                }\n                return subscripts(ex.as_expr(croak), allow_calls);\n              case "[":\n                return subscripts(array_(), allow_calls);\n              case "{":\n                return subscripts(object_or_object_destructuring_(), allow_calls);\n              case "`":\n                return subscripts(template_string(), allow_calls);\n            }\n            unexpected();\n        }\n        if (is("keyword", "function")) {\n            next();\n            var func = function_(AST_Function);\n            func.start = start;\n            func.end = prev();\n            return subscripts(func, allow_calls);\n        }\n        if (is("keyword", "class")) {\n            next();\n            var cls = class_(AST_ClassExpression);\n            cls.start = start;\n            cls.end = prev();\n            return subscripts(cls, allow_calls);\n        }\n        if (ATOMIC_START_TOKEN[S.token.type]) {\n            return subscripts(as_atom_node(), allow_calls);\n        }\n        unexpected();\n    };\n\n    function template_string() {\n        var tokenizer_S = S.input, start = S.token, segments = [], segment = "", ch;\n\n        while ((ch = tokenizer_S.next()) !== "`")  {\n            if (ch === "$" && tokenizer_S.peek() === "{") {\n                segments.push(segment); segment = "";\n                tokenizer_S.next();\n                next();\n                segments.push(expression());\n                expect("}");\n                if (is("punc", "`")) {\n                    break;\n                }\n                continue;\n            }\n            segment += ch;\n            if (ch === "\\\\") {\n                segment += tokenizer_S.next();\n            }\n        }\n\n        segments.push(segment);\n\n        next();\n\n        return new AST_TemplateString({\n            start: start,\n            segments: segments,\n            end: S.token\n        });\n    }\n\n    function expr_list(closing, allow_trailing_comma, allow_empty) {\n        var first = true, a = [];\n        while (!is("punc", closing)) {\n            if (first) first = false; else expect(",");\n            if (allow_trailing_comma && is("punc", closing)) break;\n            if (is("punc", ",") && allow_empty) {\n                a.push(new AST_Hole({ start: S.token, end: S.token }));\n            } else {\n                a.push(expression(false));\n            }\n        }\n        next();\n        return a;\n    };\n\n    var array_ = embed_tokens(function() {\n        expect("[");\n        return new AST_Array({\n            elements: expr_list("]", !options.strict, true)\n        });\n    });\n\n    var object_or_object_destructuring_ = embed_tokens(function() {\n        var start = S.token, first = true, a = [];\n        expect("{");\n        while (!is("punc", "}")) {\n            if (first) first = false; else expect(",");\n            if (!options.strict && is("punc", "}"))\n                // allow trailing comma\n                break;\n            var start = S.token;\n            var type = start.type;\n            var name = as_property_name();\n            if (type != "string" && type != "num" && !is("punc", ":")) {\n                var concise = concise_method_or_getset(name, start);\n                if (concise) {\n                    a.push(concise);\n                    continue;\n                }\n            }\n\n            if (type == "punc" && start.value == "[") {\n                expect(":");\n                a.push(new AST_ObjectComputedKeyVal({\n                    key: name,\n                    value: expression(false)\n                }));\n                continue;\n            }\n            \n            if (!is("punc", ":")) {\n                // It\'s one of those object destructurings, the value is its own name\n                a.push(new AST_ObjectSymbol({\n                    start: start,\n                    end: start,\n                    symbol: new AST_SymbolRef({\n                        start: start,\n                        end: start,\n                        name: name\n                    })\n                }));\n            } else {\n                expect(":");\n                a.push(new AST_ObjectKeyVal({\n                    start : start,\n                    key   : name,\n                    value : expression(false),\n                    end   : prev()\n                }));\n            }\n        }\n        next();\n        return new AST_Object({ properties: a })\n    });\n\n    function class_(KindOfClass) {\n        var start, method, class_name, name, extends_, a = [];\n\n        if (S.token.type == "name" && S.token.value != "extends") {\n            class_name = as_symbol(KindOfClass === AST_DefClass ? AST_SymbolDefClass : AST_SymbolClass);\n        }\n\n        if (KindOfClass === AST_DefClass && !class_name) {\n            croak();\n        }\n\n        if (S.token.value == "extends") {\n            next();\n            extends_ = expression(true);\n        }\n\n        expect("{");\n\n        if (is("punc", ";")) { next(); }  // Leading semicolons are okay in class bodies.\n        while (!is("punc", "}")) {\n            start = S.token;\n            name = as_property_name();\n            method = concise_method_or_getset(name, start);\n            if (!method) { croak(); }\n            a.push(method);\n            if (is("punc", ";")) { next(); }\n        }\n\n        next();\n\n        return new KindOfClass({\n            start: start,\n            name: class_name,\n            extends: extends_,\n            properties: a,\n            end: prev(),\n        });\n    }\n\n    function concise_method_or_getset(name, start) {\n        var is_static = false;\n        if (name === "static" && !is("punc", "(")) {\n            is_static = true;\n            name = S.token.value;\n            next();\n        }\n        if (is("punc", "(")) {\n            return new AST_ConciseMethod({\n                start    : start,\n                static   : is_static,\n                name     : new AST_SymbolMethod({ name: name }),\n                argnames : params_or_seq_().as_params(croak),\n                body     : _function_body(true),\n                end      : prev()\n            });\n        }\n        if (name == "get") {\n            return new AST_ObjectGetter({\n                start : start,\n                static: is_static,\n                key   : as_atom_node(),\n                value : function_(AST_Accessor),\n                end   : prev()\n            });\n        }\n        if (name == "set") {\n            return new AST_ObjectSetter({\n                start : start,\n                static: is_static,\n                key   : as_atom_node(),\n                value : function_(AST_Accessor),\n                end   : prev()\n            });\n        }\n    }\n\n    function as_property_name() {\n        var tmp = S.token;\n        next();\n        switch (tmp.type) {\n          case "punc":\n            if (tmp.value === "[") {\n                var ex = expression(false);\n                expect("]");\n                return ex;\n            } else unexpected();\n          case "num":\n          case "string":\n          case "name":\n          case "operator":\n          case "keyword":\n          case "atom":\n            return tmp.value;\n          default:\n            unexpected();\n        }\n    };\n\n    function as_name() {\n        var tmp = S.token;\n        next();\n        switch (tmp.type) {\n          case "name":\n          case "operator":\n          case "keyword":\n          case "atom":\n            return tmp.value;\n          default:\n            unexpected();\n        }\n    };\n\n    function _make_symbol(type) {\n        var name = S.token.value;\n        return new (name == "this" ? AST_This :\n                    name == "super" ? AST_Super :\n                    type)({\n            name  : String(name),\n            start : S.token,\n            end   : S.token\n        });\n    };\n\n    function as_symbol(type, noerror) {\n        if (!is("name")) {\n            if (!noerror) croak("Name expected");\n            return null;\n        }\n        var sym = _make_symbol(type);\n        next();\n        return sym;\n    };\n\n    var subscripts = function(expr, allow_calls) {\n        var start = expr.start;\n        if (is("punc", ".")) {\n            next();\n            return subscripts(new AST_Dot({\n                start      : start,\n                expression : expr,\n                property   : as_name(),\n                end        : prev()\n            }), allow_calls);\n        }\n        if (is("punc", "[")) {\n            next();\n            var prop = expression(true);\n            expect("]");\n            return subscripts(new AST_Sub({\n                start      : start,\n                expression : expr,\n                property   : prop,\n                end        : prev()\n            }), allow_calls);\n        }\n        if (allow_calls && is("punc", "(")) {\n            next();\n            return subscripts(new AST_Call({\n                start      : start,\n                expression : expr,\n                args       : call_args(),\n                end        : prev()\n            }), true);\n        }\n        return expr;\n    };\n\n    var call_args = embed_tokens(function call_args() {\n        var first = true;\n        var args = [];\n        while (!is("punc", ")")) {\n            if (first) first = false; else expect(",");\n            if (is("expand", "...")) {\n                next();\n                args.push(new AST_Expansion({\n                    start: prev(),\n                    symbol: as_symbol(AST_SymbolFunarg)\n                }));\n            } else {\n                args.push(expression(false));\n            }\n        }\n        next();\n        return args;\n    });\n\n    var maybe_unary = function(allow_calls) {\n        var start = S.token;\n        if (is("operator") && UNARY_PREFIX(start.value)) {\n            next();\n            handle_regexp();\n            var ex = make_unary(AST_UnaryPrefix, start.value, maybe_unary(allow_calls));\n            ex.start = start;\n            ex.end = prev();\n            return ex;\n        }\n        var val = expr_atom(allow_calls);\n        while (is("operator") && UNARY_POSTFIX(S.token.value) && !S.token.nlb) {\n            val = make_unary(AST_UnaryPostfix, S.token.value, val);\n            val.start = start;\n            val.end = S.token;\n            next();\n        }\n        return val;\n    };\n\n    function make_unary(ctor, op, expr) {\n        if ((op == "++" || op == "--") && !is_assignable(expr))\n            croak("Invalid use of " + op + " operator");\n        return new ctor({ operator: op, expression: expr });\n    };\n\n    var expr_op = function(left, min_prec, no_in) {\n        var op = is("operator") ? S.token.value : null;\n        if (op == "in" && no_in) op = null;\n        var prec = op != null ? PRECEDENCE[op] : null;\n        if (prec != null && prec > min_prec) {\n            next();\n            var right = expr_op(maybe_unary(true), prec, no_in);\n            return expr_op(new AST_Binary({\n                start    : left.start,\n                left     : left,\n                operator : op,\n                right    : right,\n                end      : right.end\n            }), min_prec, no_in);\n        }\n        return left;\n    };\n\n    function expr_ops(no_in) {\n        return expr_op(maybe_unary(true), 0, no_in);\n    };\n\n    var maybe_conditional = function(no_in) {\n        var start = S.token;\n        var expr = expr_ops(no_in);\n        if (is("operator", "?")) {\n            next();\n            var yes = expression(false);\n            expect(":");\n            return new AST_Conditional({\n                start       : start,\n                condition   : expr,\n                consequent  : yes,\n                alternative : expression(false, no_in),\n                end         : prev()\n            });\n        }\n        return expr;\n    };\n\n    function is_assignable(expr) {\n        if (!options.strict) return true;\n        if (expr instanceof AST_This) return false;\n        if (expr instanceof AST_Super) return false;\n        return (expr instanceof AST_PropAccess || expr instanceof AST_Symbol);\n    };\n\n    // In ES6, AssignmentExpression can also be an ArrowFunction\n    var maybe_assign = function(no_in) {\n        var start = S.token;\n\n        var left = maybe_conditional(no_in);\n        var val = S.token.value;\n\n        if (is("operator") && ASSIGNMENT(val)) {\n            if (is_assignable(left)) {\n                next();\n                return new AST_Assign({\n                    start    : start,\n                    left     : left,\n                    operator : val,\n                    right    : maybe_assign(no_in),\n                    end      : prev()\n                });\n            }\n            croak("Invalid assignment");\n        }\n        return left;\n    };\n\n    var expression = function(commas, no_in) {\n        var start = S.token;\n        var expr = maybe_assign(no_in);\n        if (expr instanceof AST_SymbolRef && is("arrow", "=>")) {\n            expr = new AST_ArrowParametersOrSeq({\n                start: expr.start,\n                end: expr.end,\n                expressions: [expr]\n            });\n            return arrow_function(expr);\n        }\n        if ((expr instanceof AST_SymbolRef || expr instanceof AST_PropAccess) && is("punc", "`")) {\n            return new AST_PrefixedTemplateString({\n                start: start,\n                prefix: expr,\n                template_string: template_string()\n            })\n        }\n        if (commas && is("punc", ",")) {\n            next();\n            return new AST_Seq({\n                start  : start,\n                car    : expr,\n                cdr    : expression(true, no_in),\n                end    : peek()\n            });\n        }\n        return expr;\n    };\n\n    function in_loop(cont) {\n        ++S.in_loop;\n        var ret = cont();\n        --S.in_loop;\n        return ret;\n    };\n\n    if (options.expression) {\n        return expression(true);\n    }\n\n    return (function(){\n        var start = S.token;\n        var body = [];\n        while (!is("eof"))\n            body.push(statement());\n        var end = prev();\n        var toplevel = options.toplevel;\n        if (toplevel) {\n            toplevel.body = toplevel.body.concat(body);\n            toplevel.end = end;\n        } else {\n            toplevel = new AST_Toplevel({ start: start, body: body, end: end });\n        }\n        return toplevel;\n    })();\n\n};\n';
}});